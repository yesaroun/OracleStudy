CREATE OR REPLACE PROCEDURE PRC_SUB_OPEN_UPDATE
( V_OPS_COD         IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_SUB_COD         IN SUBJECT_OPEN.SUBJECT_CODE%TYPE
, V_TXT_COD         IN SUBJECT_OPEN.TEXTBOOK_CODE%TYPE
, V_OPC_COD         IN SUBJECT_OPEN.OP_COURSE_CODE%TYPE
, V_SDATE           IN SUBJECT_OPEN.START_DATE%TYPE
, V_EDATE           IN SUBJECT_OPEN.END_DATE%TYPE
)
IS
    TEMP_OPS_COD        NUMBER;
    TEMP_SUB_COD        NUMBER;
    TEMP_TXT_COD        NUMBER;
    TEMP_OPC_COD        NUMBER;
    
    
    OPS_COD_ERROR   EXCEPTION;
    SUB_COD_ERROR   EXCEPTION;
    TXT_COD_ERROR   EXCEPTION;
    OPC_COD_ERROR   EXCEPTION;
    DATE_ERROR      EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_OPS_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OPS_COD;

    SELECT COUNT(*) INTO TEMP_SUB_COD
      FROM SUBJECT_OPEN
     WHERE SUBJECT_CODE = V_SUB_COD;

    SELECT COUNT(*) INTO TEMP_TXT_COD
      FROM SUBJECT_OPEN
     WHERE TEXTBOOK_CODE = V_TXT_COD;

    SELECT COUNT(*) INTO TEMP_OPC_COD
      FROM SUBJECT_OPEN
     WHERE OP_COURSE_CODE = V_OPC_COD;
     
    IF (TEMP_OPS_COD = 0)
        THEN RAISE OPS_COD_ERROR;
    ELSIF (TEMP_SUB_COD = 0)
        THEN RAISE SUB_COD_ERROR;
    ELSIF (TEMP_TXT_COD = 0)
        THEN RAISE TXT_COD_ERROR;
    ELSIF (TEMP_OPC_COD = 0)
        THEN RAISE OPC_COD_ERROR;
    END IF;
    
    IF(V_SDATE > V_EDATE)
        THEN RAISE DATE_ERROR;
    END IF;
     
    UPDATE SUBJECT_OPEN
       SET SUBJECT_CODE = V_SUB_COD, TEXTBOOK_CODE = V_TXT_COD
         , OP_COURSE_CODE = V_OPC_COD
         , START_DATE = V_SDATE, END_DATE = V_EDATE
     WHERE OP_SUBJECT_CODE = V_OPS_COD;
    
    EXCEPTION
        WHEN OPS_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20310, '유효한 과목코드가 아닙니다.');
            ROLLBACK;
        WHEN SUB_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
            ROLLBACK;
        WHEN TXT_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20307, '유효한 교재가 아닙니다.');
            ROLLBACK;
        WHEN OPC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20204, '날짜를 확인하세요.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;
END;



CREATE OR REPLACE PROCEDURE PRC_SUB_OPEN_UPDATE
( V_OPS_COD         IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_SUB_COD         IN SUBJECT_OPEN.SUBJECT_CODE%TYPE
, V_TXT_COD         IN SUBJECT_OPEN.TEXTBOOK_CODE%TYPE
, V_OPC_COD         IN SUBJECT_OPEN.OP_COURSE_CODE%TYPE
, V_SDATE           IN SUBJECT_OPEN.START_DATE%TYPE
, V_EDATE           IN SUBJECT_OPEN.END_DATE%TYPE
)
IS
    TEMP_OPS_COD        NUMBER;
    TEMP_SUB_COD        NUMBER;
    TEMP_TXT_COD        NUMBER;
    TEMP_OPC_COD        NUMBER;
    
    
    OPS_COD_ERROR   EXCEPTION;
    SUB_COD_ERROR   EXCEPTION;
    TXT_COD_ERROR   EXCEPTION;
    OPC_COD_ERROR   EXCEPTION;
    DATE_ERROR      EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_OPS_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OPS_COD;
    
    IF (TEMP_OPS_COD = 0)
        THEN RAISE OPS_COD_ERROR;
    END IF;

    SELECT COUNT(*) INTO TEMP_SUB_COD
      FROM SUBJECT_OPEN
     WHERE SUBJECT_CODE = V_SUB_COD;
     
    IF (TEMP_SUB_COD = 0)
        THEN RAISE SUB_COD_ERROR;
    END IF;     

    SELECT COUNT(*) INTO TEMP_TXT_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_TXT_COD;
    
    IF (TEMP_TXT_COD = 0)
        THEN RAISE TXT_COD_ERROR;
    END IF;
    
    SELECT COUNT(*) INTO TEMP_OPC_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OPC_COD;
     
    IF (TEMP_OPC_COD = 0)
        THEN RAISE OPC_COD_ERROR;
    END IF;     
    
    IF(V_SDATE > V_EDATE)
        THEN RAISE DATE_ERROR;
    END IF;
     
    UPDATE SUBJECT_OPEN
       SET SUBJECT_CODE = V_SUB_COD, TEXTBOOK_CODE = V_TXT_COD
         , OP_COURSE_CODE = V_OPC_COD
         , START_DATE = V_SDATE, END_DATE = V_EDATE
     WHERE OP_SUBJECT_CODE = V_OPS_COD;
    
    EXCEPTION
        WHEN OPS_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20310, '유효한 과목코드가 아닙니다.');
            ROLLBACK;
        WHEN SUB_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
            ROLLBACK;
        WHEN TXT_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20307, '유효한 교재가 아닙니다.');
            ROLLBACK;
        WHEN OPC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20204, '날짜를 확인하세요.');
            ROLLBACK;
      --  WHEN OTHERS
        --    THEN dbms_output.put_line('CNFFUR');

    COMMIT;
END;

EXEC PRC_SUB_OPEN_UPDATE('C1S1', 1, 2, 'C1', '2020-07-07', '2022-08-07');

SELECT *
  FROM SUBJECT_OPEN;

SET SERVEROUTPUT ON; 
  
  
CREATE OR REPLACE PROCEDURE PRC_COURSE_UPDATE
( V_COU_COD     IN COURSE.COURSE_CODE%TYPE
, V_COU_NAME    IN COURSE.COURSE_NAME%TYPE
)
IS
    TEMP_COU_COD    NUMBER;
    
    COU_COD_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_COU_COD
      FROM COURSE
     WHERE COURSE_CODE = V_COU_COD;
     
    IF (TEMP_COU_COD = 0)
        THEN RAISE COU_COD_ERROR;
    END IF;

    UPDATE COURSE
       SET COURSE_NAME = V_COU_NAME
     WHERE COURSE_CODE = V_COU_COD;
     
    EXCEPTION
        WHEN COU_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;
END;

EXEC PRC_COURSE_UPDATE(1, '자바도함');

SELECT *
  FROM COURSE;

SELECT SR.NAME "학생이름", FN_COURSE(CO.COURSE_CODE) "과정명"
     , FN_SUBJECT(SO.SUBJECT_CODE) "수강과목"     -- , "수강과목총점"
  FROM STUDENT_REGISTER SR LEFT JOIN COURSE_REGISTER CR
        ON SR.STUDENT_CODE = CR.STUDENT_CODE
        LEFT JOIN COURSE_OPEN CO
        ON CR.OP_COURSE_CODE = CO.OP_COURSE_CODE
        LEFT JOIN SUBJECT_OPEN SO
        ON CO.OP_COURSE_CODE = SO.OP_COURSE_CODE;

CREATE OR REPLACE VIEW VIEW_MA_STD
AS
SELECT SR.NAME "학생이름", C.COURSE_CODE "과정명", S.SUBJECT_NAME "수강과목"
     , (SI.ATTENDANCE_SCORE*SO.ATTENDANCE_RATE*0.01+ SI.WRITING_SCORE*SO.WRITING_RATE*0.01 
      + SI.PERFORMANCE_SCORE*SO.PERFORMANCE_RATE*0.01)  "수강과목총점"
FROM STUDENT_REGISTER SR, COURSE_REGISTER CR, COURSE_OPEN CO
   , COURSE C, SUBJECT_OPEN SO, SUBJECT S, SCORE_INPUT SI
WHERE SR.STUDENT_CODE = CR.STUDENT_CODE
  AND C.COURSE_CODE = CO.COURSE_CODE
  AND CO.OP_COURSE_CODE = CR.OP_COURSE_CODE
  AND CR.REG_COURSE_CODE = SI.REG_COURSE_CODE
  AND SI.OP_SUBJECT_CODE = SO.OP_SUBJECT_CODE
  AND SO.SUBJECT_CODE = S.SUBJECT_CODE;

SELECT *
  FROM VIEW_MA_STD;

SELECT *
  FROM COURSE_REGISTER;

SELECT *
  FROM STUDENT_REGISTER;

SELECT *
  FROM COURSE;
SELECT *
  FROM SUBJECT_OPEN;

SELECT *
  FROM SCORE_INPUT;

CREATE OR REPLACE PROCEDURE PRC_SUB_OPEN_UPDATE
( V_OPS_COD         IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_SUB_COD         IN SUBJECT_OPEN.SUBJECT_CODE%TYPE
, V_TXT_COD         IN SUBJECT_OPEN.TEXTBOOK_CODE%TYPE
, V_OPC_COD         IN SUBJECT_OPEN.OP_COURSE_CODE%TYPE
, V_SDATE           IN SUBJECT_OPEN.START_DATE%TYPE
, V_EDATE           IN SUBJECT_OPEN.END_DATE%TYPE
)
IS
    TEMP_OPS_COD        NUMBER;
    TEMP_SUB_COD        NUMBER;
    TEMP_TXT_COD        NUMBER;
    TEMP_OPC_COD        NUMBER;
    
    
    OPS_COD_ERROR   EXCEPTION;
    SUB_COD_ERROR   EXCEPTION;
    TXT_COD_ERROR   EXCEPTION;
    OPC_COD_ERROR   EXCEPTION;
    DATE_ERROR      EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_OPS_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OPS_COD;

    SELECT COUNT(*) INTO TEMP_SUB_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_SUB_COD;

    SELECT COUNT(*) INTO TEMP_TXT_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_TXT_COD;

    SELECT COUNT(*) INTO TEMP_OPC_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OPC_COD;
     
    IF (TEMP_OPS_COD = 0)
        THEN RAISE OPS_COD_ERROR;
    ELSIF (TEMP_SUB_COD = 0)
        THEN RAISE SUB_COD_ERROR;
    ELSIF (TEMP_TXT_COD = 0)
        THEN RAISE TXT_COD_ERROR;
    ELSIF (TEMP_OPC_COD = 0)
        THEN RAISE OPC_COD_ERROR;
    END IF;
    
    IF(V_SDATE > V_EDATE)
        THEN RAISE DATE_ERROR;
    END IF;
     
    UPDATE SUBJECT_OPEN
       SET SUBJECT_CODE = V_SUB_COD, TEXTBOOK_CODE = V_TXT_COD
         , OP_COURSE_CODE = V_OPC_COD
         , START_DATE = V_SDATE, END_DATE = V_EDATE
     WHERE OP_SUBJECT_CODE = V_OPS_COD;
    
    EXCEPTION
        WHEN OPS_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20310, '유효한 과목코드가 아닙니다.');
            ROLLBACK;
        WHEN SUB_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
            ROLLBACK;
        WHEN TXT_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20307, '유효한 교재가 아닙니다.');
            ROLLBACK;
        WHEN OPC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20204, '날짜를 확인하세요.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;
END;


CREATE OR REPLACE PROCEDURE PRC_SUB_OPEN_UPDATE
( V_OPS_COD         IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_SUB_COD         IN SUBJECT_OPEN.SUBJECT_CODE%TYPE
, V_TXT_COD         IN SUBJECT_OPEN.TEXTBOOK_CODE%TYPE
, V_OPC_COD         IN SUBJECT_OPEN.OP_COURSE_CODE%TYPE
, V_SDATE           IN SUBJECT_OPEN.START_DATE%TYPE
, V_EDATE           IN SUBJECT_OPEN.END_DATE%TYPE
)
IS
    TEMP_OPS_COD        NUMBER;
    TEMP_SUB_COD        NUMBER;
    TEMP_TXT_COD        NUMBER;
    TEMP_OPC_COD        NUMBER;
    
    
    OPS_COD_ERROR   EXCEPTION;
    SUB_COD_ERROR   EXCEPTION;
    TXT_COD_ERROR   EXCEPTION;
    OPC_COD_ERROR   EXCEPTION;
    DATE_ERROR      EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_OPS_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OPS_COD;
    
    IF (TEMP_OPS_COD = 0)
        THEN RAISE OPS_COD_ERROR;
    END IF;

    SELECT COUNT(*) INTO TEMP_SUB_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_SUB_COD;
     
    IF (TEMP_SUB_COD = 0)
        THEN RAISE SUB_COD_ERROR;
    END IF;     

    SELECT COUNT(*) INTO TEMP_TXT_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_TXT_COD;
    
    IF (TEMP_TXT_COD = 0)
        THEN RAISE TXT_COD_ERROR;
    END IF;
    
    SELECT COUNT(*) INTO TEMP_OPC_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OPC_COD;
     
    IF (TEMP_OPC_COD = 0)
        THEN RAISE OPC_COD_ERROR;
    END IF;     
    
    IF(V_SDATE > V_EDATE)
        THEN RAISE DATE_ERROR;
    END IF;
     
    UPDATE SUBJECT_OPEN
       SET SUBJECT_CODE = V_SUB_COD, TEXTBOOK_CODE = V_TXT_COD
         , OP_COURSE_CODE = V_OPC_COD
         , START_DATE = V_SDATE, END_DATE = V_EDATE
     WHERE OP_SUBJECT_CODE = V_OPS_COD;
    
    EXCEPTION
        WHEN OPS_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20310, '유효한 과목코드가 아닙니다.');
            ROLLBACK;
        WHEN SUB_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
            ROLLBACK;
        WHEN TXT_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20307, '유효한 교재가 아닙니다.');
            ROLLBACK;
        WHEN OPC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20204, '날짜를 확인하세요.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;
END;

EXEC PRC_SUB_OPEN_UPDATE('C1S1', 1, 1, 'C1', '2021-07-07', '2021-08-07');

SELECT *
  FROM SUBJECT_OPEN;