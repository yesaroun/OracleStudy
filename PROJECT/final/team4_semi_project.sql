--------------------------------------------------------------------------------
--● TABLE
--------------------------------------------------------------------------------

--○ 관리자등록 테이블 생성
CREATE TABLE MANAGER_REGISTER
( MANAGER_CODE   VARCHAR2(10)
, PASSWORD       VARCHAR2(30) CONSTRAINT MA_PASSWORD_NN NOT NULL
, REGISTER_DATE  DATE DEFAULT SYSDATE
, CONSTRAINT MA_CODE_PK PRIMARY KEY(MANAGER_CODE)
);

--------------------------------------------------------------------------------

--○ 교수등록 테이블 생성
CREATE TABLE TEACHER_REGISTER
( TEACHER_CODE    VARCHAR2(10)          --(교수코드)
, PASSWORD        VARCHAR2(30) CONSTRAINT TC_PASSWORD_NN NOT NULL         --(비밀번호)
, NAME            VARCHAR2(20) CONSTRAINT TC_NAME_NN NOT NULL          --(교수명)
, SSN             VARCHAR2(13) CONSTRAINT TC_SSN_NN NOT NULL          --(주민번호)
, REGISTER_DATE   DATE DEFAULT SYSDATE  --(가입일자)
, CONSTRAINT TC_CODE_PK PRIMARY KEY(TEACHER_CODE)
);

--------------------------------------------------------------------------------

--○ 학생 등록(STD) 테이블 생성
CREATE TABLE STUDENT_REGISTER
( STUDENT_CODE      VARCHAR2(10)         -- (학생코드)
, PASSWORD          VARCHAR2(30) CONSTRAINT STD_PASSWORD_NN NOT NULL           -- (비밀번호)
, NAME              VARCHAR2(20) CONSTRAINT STD_NAME_NN NOT NULL           -- (학생명)
, SSN               VARCHAR2(13) CONSTRAINT STD_SSN_NN NOT NULL           -- (주민번호)
, REGISTER_DATE     DATE DEFAULT SYSDATE -- (가입일자)
, CONSTRAINT STD_STD_CODE_PK PRIMARY KEY(STUDENT_CODE)
, CONSTRAINT STD_REG_DATE_NN CHECK(REGISTER_DATE IS NOT NULL)
, CONSTRAINT STD_SSN_UK UNIQUE(SSN)
);
--==>>Table STUDENT_REGISTER이(가) 생성되었습니다.

--------------------------------------------------------------------------------

--○ 과정 개설(OP_COU) 테이블 생성
CREATE TABLE COURSE_OPEN
( OP_COURSE_CODE    VARCHAR2(10)         -- (과정개설코드)
, COURSE_CODE       NUMBER CONSTRAINT OP_COU_COU_CODE_NN NOT NULL               -- (과정코드)
, TEACHER_CODE      VARCHAR2(10)       -- (교수코드)
, CLASSROOM_CODE    NUMBER CONSTRAINT OP_COU_CLA_CODE_NN NOT NULL               -- (강의실코드)
, START_DATE        DATE CONSTRAINT OP_COU_STA_DATE_NN NOT NULL                 -- (시작일자)
, END_DATE          DATE CONSTRAINT OP_COU_END_DATE_NN NOT NULL                 -- (종료일자)
, OPEN_DATE         DATE DEFAULT SYSDATE -- (개설일자)
, CONSTRAINT OP_COU_OP_COU_CODE_PK PRIMARY KEY(OP_COURSE_CODE)
, CONSTRAINT OP_COU_COU_CODE_FK FOREIGN KEY(COURSE_CODE)
                                REFERENCES COURSE(COURSE_CODE)
, CONSTRAINT OP_COU_TEA_CODE_FK FOREIGN KEY(TEACHER_CODE)
                                REFERENCES TEACHER_REGISTER(TEACHER_CODE)
, CONSTRAINT OP_COU_CLA_CODE_FK FOREIGN KEY(CLASSROOM_CODE)
                                REFERENCES CLASSROOM_REGISTER(CLASSROOM_CODE);
);

--------------------------------------------------------------------------------

--○ 수강신청 테이블 생성(REG_COU)
CREATE TABLE COURSE_REGISTER
( REG_COURSE_CODE   VARCHAR2(10)   
, OP_COURSE_CODE    VARCHAR2(10) CONSTRAINT REG_COU_COU_CODE_NN NOT NULL     
, STUDENT_CODE      VARCHAR2(10) CONSTRAINT REG_COU_STD_CODE_NN NOT NULL     
, REG_COURSE_DATE   DATE DEFAULT SYSDATE
, CONSTRAINT REG_COU_CODE_PK PRIMARY KEY(REG_COURSE_CODE)
, CONSTRAINT REG_COU_COU_CODE_FK FOREIGN KEY(OP_COURSE_CODE)
                                 REFERENCES COURSE_OPEN(OP_COURSE_CODE)
, CONSTRAINT TEG_COU_STD_CODE_FK FOREIGN KEY(STUDENT_CODE)
                                 REFERENCES STUDENT_REGISTER(STUDENT_CODE)
);

--------------------------------------------------------------------------------

--○ 중도탈락 테이블 생성(DR_STD)
CREATE TABLE STUDENT_DROP
( DROP_CODE         VARCHAR2(10)    
, REG_COURSE_CODE   VARCHAR2(10) CONSTRAINT DR_STD_COU_CODE_NN NOT NULL   
, DR_REASON_CODE    NUMBER
, DROP_DATE         DATE DEFAULT SYSDATE
, CONSTRAINT DR_STD_CODE_PK   PRIMARY KEY(DROP_CODE)
, CONSTRAINT DR_STD_COU_CODE_FK FOREIGN KEY(REG_COURSE_CODE)
                                REFERENCES COURSE_REGISTER(REG_COURSE_CODE)
, CONSTRAINT DR_STD_RE_CODE_FK FOREIGN KEY(DR_REASON_CODE)
                                REFERENCES DROP_REASON(DR_REASON_CODE)
);

--------------------------------------------------------------------------------

--○ 중도탈락사유코드 테이블 생성(DR_RE) 
CREATE TABLE DROP_REASON
( DR_REASON_CODE   NUMBER                                   -- 중도탈락사유코드
, DETAIL           VARCHAR2(30) CONSTRAINT DR_RE_DET_NN NOT NULL                             -- 중도탈락상세사유
, CONSTRAINT DR_RE_CODE_PK PRIMARY KEY(DR_REASON_CODE)
);

--------------------------------------------------------------------------------

--○ 강의실등록 테이블 생성(REG_CLASS)
CREATE TABLE CLASSROOM_REGISTER
( CLASSROOM_CODE      NUMBER                                    -- 강의실코드
, CLASSROOM_NAME      VARCHAR2(20) CONSTRAINT REG_CLASS_NAME_NN NOT NULL                             -- 강의실명
, CLASSROOM_CAPACITY  NUMBER CONSTRAINT REG_CLASS_CAPA_NN NOT NULL                                   -- 수용인원
, CONSTRAINT REG_CLASS_CODE_PK PRIMARY KEY (CLASSROOM_CODE)
);         

--------------------------------------------------------------------------------

--○ 과정(COU) 테이블 생성
CREATE TABLE COURSE
( COURSE_CODE    NUMBER           -- (과정코드)
, COURSE_NAME    VARCHAR2(20) CONSTRAINT COU_NAME_NN NOT NULL    -- (과정명)
, CONSTRAINT COU_CODE_PK PRIMARY KEY(COURSE_CODE)
);

--------------------------------------------------------------------------------

--○ 과목개설(OP_SUB) 테이블 생성
CREATE TABLE SUBJECT_OPEN
( OP_SUBJECT_CODE   VARCHAR2(10)            -- (과목개설코드)
, SUBJECT_CODE      NUMBER CONSTRAINT OP_SUB_SUB_CODE_NN NOT NULL                 -- (과목코드)
, TEXTBOOK_CODE     NUMBER                  -- (교재코드) 
, OP_COURSE_CODE    VARCHAR2(10) CONSTRAINT OP_SUB_OP_COU_CODE_NN NOT NULL           -- (과정개설코드)
, START_DATE        DATE CONSTRAINT OP_SUB_STR_DATE_NN NOT NULL                   -- (시작일자)
, END_DATE          DATE CONSTRAINT OP_SUB_END_DATE_NN NOT NULL                   -- (종료일자)     
, ATTENDANCE_RATE   NUMBER                  -- (출결배점)
, WRITING_RATE      NUMBER                  -- (필기배점)   
, PERFORMANCE_RATE  NUMBER                  -- (실기배점) 
, OPEN_DATE         DATE DEFAULT SYSDATE    -- (개설일자) 
, CONSTRAINT OP_SUB_CODE_PK PRIMARY KEY(OP_SUBJECT_CODE)
, CONSTRAINT OP_SUB_SUB_CODE_FK FOREIGN KEY(SUBJECT_CODE)
                                REFERENCES SUBJECT(SUBJECT_CODE)
, CONSTRAINT OP_SUB_TXT_CODE_FK FOREIGN KEY(TEXTBOOK_CODE)
                                REFERENCES TEXTBOOK(TEXTBOOK_CODE)
, CONSTRAINT OP_SUB_OP_COU_CODE_FK FOREIGN KEY(OP_COURSE_CODE)
                                REFERENCES COURSE_OPEN(OP_COURSE_CODE)
);

--------------------------------------------------------------------------------

--○ 교재 테이블 생성
CREATE TABLE TEXTBOOK
( TEXTBOOK_CODE NUMBER
, TEXTBOOK_NAME VARCHAR2(20) CONSTRAINT TXT_NAME_NN NOT NULL
, PUBLISHER     VARCHAR2(30)
, CONSTRAINT TXT_CODE_PK PRIMARY KEY (TEXTBOOK_CODE)
);

--------------------------------------------------------------------------------

--○과목 테이블
CREATE TABLE SUBJECT
( SUBJECT_CODE NUMBER
, SUBJECT_NAME VARCHAR2(20) CONSTRAINT SUB_NAME_NN NOT NULL
, CONSTRAINT SUB_CODE_PK PRIMARY KEY (SUBJECT_CODE)
);

--------------------------------------------------------------------------------

--○ 성적 입력 테이블
CREATE TABLE SCORE_INPUT
( SCORE_CODE        VARCHAR2(10)
, OP_SUBJECT_CODE   VARCHAR2(10) CONSTRAINT IN_SCR_OP_SUB_CODE_NN NOT NULL
, REG_COURSE_CODE   VARCHAR2(10) CONSTRAINT IN_SCR_REG_COU_CODE_NN NOT NULL
, ATTENDANCE_SCORE  NUMBER DEFAULT 0
, WRITING_SCORE     NUMBER DEFAULT 0
, PERFORMANCE_SCORE NUMBER DEFAULT 0
, SCORE_DATE        DATE DEFAULT SYSDATE
, CONSTRAINT IN_SCR_CODE_PK PRIMARY KEY (SCORE_CODE)
, CONSTRAINT IN_SCR_OP_SUB_CODE_FK FOREIGN KEY(OP_SUBJECT_CODE)         
                                   REFERENCES SUBJECT_OPEN(OP_SUBJECT_CODE)
, CONSTRAINT IN_SCR_REG_COU_CODE_FK FOREIGN KEY(REG_COURSE_CODE)    
                                   REFERENCES COURSE_REGISTER(REG_COURSE_CODE)
);

--------------------------------------------------------------------------------

--○ 제약조건 확인 전용 뷰(VIEW) 생성
--   (SYS 계정)GRANT CREATE VIEW TO TEAM4;
CREATE OR REPLACE VIEW VIEW_CONSTCHECK
AS
SELECT UC.OWNER "OWNER"
      ,UC.CONSTRAINT_NAME "CONSTRAINT_NAME"
      ,UC.TABLE_NAME"TABLE_NAME"
      ,UC.CONSTRAINT_TYPE"CONSTRAINT_TYPE"
      ,UCC.COLUMN_NAME"COLUMN_NAME"
      ,UC.SEARCH_CONDITION"SEARCH_CONDITION"
      ,UC.DELETE_RULE"DELETE_RULE"
FROM USER_CONSTRAINTS UC JOIN USER_CONS_COLUMNS UCC
ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME;
--==>> View VIEW_CONSTCHECK이(가) 생성되었습니다.

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
--● VALUES
--------------------------------------------------------------------------------

--○ 관리자등록 테이블 데이터 입력
INSERT INTO MANAGER_REGISTER(MANAGER_CODE, PASSWORD)
VALUES ('M0001', '1234567');
INSERT INTO MANAGER_REGISTER(MANAGER_CODE, PASSWORD)
VALUES ('M0002', '8910');

--------------------------------------------------------------------------------

--○ 교수등록 테이블 데이터 입력
INSERT INTO TEACHER_REGISTER(TEACHER_CODE, PASSWORD, NAME, SSN)
VALUES ('T0001', '1234', '김교수', 9909091234567);
INSERT INTO TEACHER_REGISTER(TEACHER_CODE, PASSWORD, NAME, SSN)
VALUES ('T0002', '2345678', '박교수', 6501012345678);

--------------------------------------------------------------------------------

--○ 학생등록 테이블 데이터 입력
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0001', '1234', '김공일', 9203271234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0002', '1234', '김공이', 9505012234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0003', '1234', '김공삼', 9705031234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0004', '1234', '김공사', 9908012234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0005', '1234', '김공오', 9102031234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0006', '1234', '김공육', 9808182234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0007', '1234', '김공칠', 9909091234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0008', '1234', '김공팔', 9403042234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0009', '1234', '김공구', 9202011234567);
INSERT INTO STUDENT_REGISTER (STUDENT_CODE, PASSWORD, NAME, SSN)
VALUES ('S0010', '1234', '김공십', 9712242234567);

--------------------------------------------------------------------------------

--○ 과정 테이블 데이터 입력
INSERT INTO COURSE (COURSE_CODE, COURSE_NAME)
VALUES (1, '자바만함');

--------------------------------------------------------------------------------

--○ 과목 테이블 데이터 입력
INSERT INTO SUBJECT (SUBJECT_CODE, SUBJECT_NAME)
VALUES (1, '자바초급');
INSERT INTO SUBJECT (SUBJECT_CODE, SUBJECT_NAME)
VALUES (2, '자바중급');
INSERT INTO SUBJECT (SUBJECT_CODE, SUBJECT_NAME)
VALUES (3, '자바고급');

--------------------------------------------------------------------------------

--○ 강의실등록 테이블 데이터 입력
INSERT INTO CLASSROOM_REGISTER (CLASSROOM_CODE, CLASSROOM_NAME, 
CLASSROOM_CAPACITY)
VALUES (101, '101호', 10);
INSERT INTO CLASSROOM_REGISTER (CLASSROOM_CODE, CLASSROOM_NAME, 
CLASSROOM_CAPACITY)
VALUES (201, '201호', 20);
INSERT INTO CLASSROOM_REGISTER (CLASSROOM_CODE, CLASSROOM_NAME, 
CLASSROOM_CAPACITY)
VALUES (301, '301호', 30);

--------------------------------------------------------------------------------

--○ 교재 테이블 데이터 입력
INSERT INTO TEXTBOOK (TEXTBOOK_CODE, TEXTBOOK_NAME)
VALUES (1, '자바첫걸음');
INSERT INTO TEXTBOOK (TEXTBOOK_CODE, TEXTBOOK_NAME)
VALUES (2, '자바뛴다');
INSERT INTO TEXTBOOK (TEXTBOOK_CODE, TEXTBOOK_NAME)
VALUES (3, '자바난다요');

--------------------------------------------------------------------------------

--○ 과정개설 테이블 데이터 입력
INSERT INTO COURSE_OPEN (OP_COURSE_CODE, COURSE_CODE, CLASSROOM_CODE, START_DATE, END_DATE)
VALUES ('C1', 1, 101, TO_DATE('2021-07-01', 'YYYY-MM-DD'), TO_DATE('2021-12-31', 'YYYY-MM-DD'));
INSERT INTO COURSE_OPEN (OP_COURSE_CODE, COURSE_CODE, CLASSROOM_CODE, START_DATE, END_DATE)
VALUES ('C2', 1, 201, TO_DATE('2021-09-01', 'YYYY-MM-DD'), TO_DATE('2022-03-01', 'YYYY-MM-DD'));
INSERT INTO COURSE_OPEN (OP_COURSE_CODE, COURSE_CODE, CLASSROOM_CODE, START_DATE, END_DATE)
VALUES ('C3', 1, 301, TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-06-30', 'YYYY-MM-DD'));

--------------------------------------------------------------------------------

--○ 과목개설 테이블 데이터 입력
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C1S1', 1, 1, 'C1', TO_DATE('2021-07-01', 'YYYY-MM-DD')
       , TO_DATE('2021-08-31', 'YYYY-MM-DD'), 30, 40, 30);
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C1S2', 2, 2, 'C1', TO_DATE('2021-09-01', 'YYYY-MM-DD')
       , TO_DATE('2021-10-31', 'YYYY-MM-DD'), 20, 30, 50);
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C1S3', 3, 3, 'C1', TO_DATE('2021-11-01', 'YYYY-MM-DD')
       , TO_DATE('2021-12-30', 'YYYY-MM-DD'), 70, 10, 20);
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C2S1', 1, 1, 'C2', TO_DATE('2021-09-01', 'YYYY-MM-DD')
       , TO_DATE('2021-09-30', 'YYYY-MM-DD'), 30, 40, 30);
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C2S2', 2, 2, 'C2', TO_DATE('2021-10-01', 'YYYY-MM-DD')
       , TO_DATE('2021-11-30', 'YYYY-MM-DD'), 20, 30, 50);
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C2S3', 3, 3, 'C2', TO_DATE('2021-12-01', 'YYYY-MM-DD')
       , TO_DATE('2022-02-28', 'YYYY-MM-DD'), 70, 10, 20);
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C3S1', 1, 1, 'C3', TO_DATE('2022-01-01', 'YYYY-MM-DD')
       , TO_DATE('2022-02-28', 'YYYY-MM-DD'), 30, 40, 30);
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C3S2', 2, 2, 'C3', TO_DATE('2022-03-01', 'YYYY-MM-DD')
       , TO_DATE('2022-04-30', 'YYYY-MM-DD'), 20, 30, 50);
INSERT INTO SUBJECT_OPEN (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, 
OP_COURSE_CODE, START_DATE, END_DATE, ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE)
VALUES ('C3S3', 3, 3, 'C3', TO_DATE('2022-05-01', 'YYYY-MM-DD')
       , TO_DATE('2022-06-30', 'YYYY-MM-DD'), 70, 10, 20);
       
--------------------------------------------------------------------------------

--○ 수강신청 테이블 데이터 입력
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC11', 'C1', 'STD001');
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC12', 'C1', 'STD002');
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC13', 'C1', 'STD003');
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC21', 'C2', 'STD004');
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC22', 'C2', 'STD005');
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC23', 'C2', 'STD006');
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC31', 'C3', 'STD007');
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC32', 'C3', 'STD008');
INSERT INTO COURSE_REGISTER (REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE)
VALUES ('CRC33', 'C3', 'STD009');

--------------------------------------------------------------------------------

--○ 성적입력 테이블 데이터 입력
--   C1 세부과목 세 학생 정보
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S1_001', 'C1S1', 'CRC11', 70, 60, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S1_002', 'C1S1', 'CRC12', 20, 80, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S1_003', 'C1S1', 'CRC13', 90, 80, 90);

INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S2_001', 'C1S2', 'CRC11', 20, 50, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S2_002', 'C1S2', 'CRC12', 50, 80, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S2_003', 'C1S2', 'CRC13', 60, 80, 90);

INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S3_001', 'C1S3', 'CRC11', 70, 40, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S3_002', 'C1S3', 'CRC12', 20, 20, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C1S3_003', 'C1S3', 'CRC13', 90, 30, 90);

-- C2 세부과목 세 학생 세부 정보
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C2S1_001', 'C2S1', 'CRC21', 70, 60, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C2S1_002', 'C2S1', 'CRC22', 20, 80, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C2S1_003', 'C2S1', 'CRC23', 90, 80, 90);

INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C2S2_001', 'C2S2', 'CRC21', 20, 50, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C2S2_002', 'C2S2', 'CRC22', 50, 80, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C2S2_003', 'C2S2', 'CRC23', 60, 80, 90);

INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C3S3_001', 'C3S3', 'CRC21', 70, 40, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C3S3_002', 'C3S3', 'CRC22', 20, 20, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C3S3_003', 'C3S3', 'CRC23', 90, 30, 90);

-- C3 세부과목 C3S1. 세 학생 세부 정보
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C3S1_001', 'C3S1', 'CRC31', 70, 60, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C3S1_002', 'C3S1', 'CRC32', 20, 80, 50);
INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, 
ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
VALUES ('C3S1_003', 'C3S1', 'CRC33', 90, 80, 90);

--------------------------------------------------------------------------------

--○ 중도탈락 테이블 데이터 입력
INSERT INTO STUDENT_DROP (DROP_CODE, REG_COURSE_CODE) 
VALUES ('D1', 'CRC32');

--------------------------------------------------------------------------------

--○ 중도탈락사유 테이블 데이터 입력
INSERT INTO DROP_REASON (DR_REASON_CODE, DETAIL) 
VALUES (1, '출석률 미달');

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
--● FUNCTION
--------------------------------------------------------------------------------

--○ 아이디 조회 함수 FN_ID_CHECK(ID)
CREATE OR REPLACE FUNCTION FN_ID_CHECK
(ID MANAGER_REGISTER.MANAGER_CODE%TYPE)
RETURN NUMBER 
IS
    V_M NUMBER;
    V_T NUMBER;
    V_S NUMBER;
    V_RESULT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_T
    FROM TEACHER_REGISTER
    WHERE TEACHER_CODE = ID;
    
    SELECT COUNT(*) INTO V_M
    FROM MANAGER_REGISTER
    WHERE MANAGER_CODE = ID;
    
    SELECT COUNT(*) INTO V_S
    FROM STUDENT_REGISTER
    WHERE STUDENT_CODE = ID;
    
    IF (SUBSTR(ID,1,1) = 'M')
        THEN V_RESULT := V_M;
    ELSIF (SUBSTR(ID,1,1) = 'T')
        THEN V_RESULT := V_T;
    ELSIF (SUBSTR(ID,1,1) = 'S')
        THEN V_RESULT := V_S;
    ELSE
        V_RESULT := 0;
    END IF;
 
    RETURN V_RESULT;    -- 반환 : 일치하는 ID가 있으면 1, 없으면 0
END;

--------------------------------------------------------------------------------

--○ 비밀번호 조회 함수 FN_PW_CHECK(ID,PW)
CREATE OR REPLACE FUNCTION FN_PW_CHECK
( CODE MANAGER_REGISTER.MANAGER_CODE%TYPE
, PW MANAGER_REGISTER.PASSWORD%TYPE)
RETURN NUMBER 
IS
    V_M NUMBER;
    V_T NUMBER;
    V_S NUMBER;
    V_RESULT    NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_M
    FROM MANAGER_REGISTER
    WHERE PASSWORD = PW
      AND MANAGER_CODE = CODE;

    SELECT COUNT(*) INTO V_T
    FROM TEACHER_REGISTER
    WHERE PASSWORD = PW
      AND TEACHER_CODE = CODE;
    
    SELECT COUNT(*) INTO V_S
    FROM STUDENT_REGISTER
    WHERE PASSWORD = PW
      AND STUDENT_CODE = CODE;
    
    IF (V_M = 1 AND V_T = 0 AND V_S = 0)
    THEN V_RESULT := V_M;
    ELSIF (V_T = 1 AND V_M = 0 AND V_S = 0)
    THEN V_RESULT := V_T;
    ELSIF (V_S = 1 AND V_M = 0 AND V_T = 0)
    THEN V_RESULT := V_S;
    ELSE
        V_RESULT := 0;
    END IF;
 
    RETURN V_RESULT;    -- 반환 : 일치하는 PW가 있으면 1, 없으면 0
END;

--------------------------------------------------------------------------------

--○ 과정명 반환 함수 FN_COURSE(과정코드)
CREATE OR REPLACE FUNCTION FN_COURSE(V_COU_COD NUMBER)
RETURN VARCHAR2
IS
    V_COU_NAME   COURSE.COURSE_NAME%TYPE;
BEGIN
    SELECT COURSE_NAME INTO V_COU_NAME
      FROM COURSE
     WHERE COURSE_CODE = V_COU_COD;
     
     RETURN V_COU_NAME;
END;


--------------------------------------------------------------------------------

--○ 교수명 반환 함수 FN_TEACHER_REGISTER(교수ID)
CREATE OR REPLACE FUNCTION FN_TEACHER_REGISTER(V_TC_COD VARCHAR2)
RETURN  VARCHAR2
IS
    V_NAME  TEACHER_REGISTER.NAME%TYPE;
BEGIN
    SELECT NAME INTO V_NAME
      FROM TEACHER_REGISTER
     WHERE TEACHER_CODE = V_TC_COD;
    
    RETURN V_NAME;
END;

--------------------------------------------------------------------------------

--○ 강의실명 반환 함수 FN_CLASSROOM_REGISTER(강의실코드) 
CREATE OR REPLACE FUNCTION FN_CLASSROOM_REGISTER(V_CLAS_COD NUMBER)
RETURN  VARCHAR2
IS
    V_CLAS_NAME    CLASSROOM_REGISTER.CLASSROOM_NAME%TYPE;
BEGIN
    SELECT CLASSROOM_NAME INTO V_CLAS_NAME
      FROM CLASSROOM_REGISTER
     WHERE CLASSROOM_CODE = V_CLAS_COD;
    
    RETURN V_CLAS_NAME;
END;

--------------------------------------------------------------------------------

--○ 교재명 반환 함수 FN_TEXTBOOK(교재코드)
CREATE OR REPLACE FUNCTION FN_TEXTBOOK(V_TXT_COD  NUMBER)
RETURN  VARCHAR2
IS
    V_TXT_NAME     TEXTBOOK.TEXTBOOK_NAME%TYPE;
BEGIN
    SELECT TEXTBOOK_NAME INTO V_TXT_NAME
      FROM TEXTBOOK
     WHERE TEXTBOOK_CODE = V_TXT_COD;
     
     RETURN V_TXT_NAME;
END;

--------------------------------------------------------------------------------

--○ 과목명 반환 함수 FN_SUBJECT(과목코드)
CREATE OR REPLACE FUNCTION FN_SUBJECT(V_SUB_COD NUMBER)
RETURN  VARCHAR2
IS
    V_SUB_NAME  SUBJECT.SUBJECT_NAME%TYPE;
BEGIN
    SELECT SUBJECT_NAME INTO V_SUB_NAME
      FROM SUBJECT
     WHERE SUBJECT_CODE = V_SUB_COD;
     
     RETURN V_SUB_NAME;
END;

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
--● VIEW
--------------------------------------------------------------------------------

-- [과정관리]
--○ 관리자의 모든 과정 정보 출력 기능
-- 출력 정보 : 과정명, 강의실, 과목명, 기간, 교재명, 교수자명
CREATE OR REPLACE VIEW VIEW_MA_COU
AS
SELECT FN_COURSE(CO.COURSE_CODE) "과정명", FN_CLASSROOM_REGISTER(CO.CLASSROOM_CODE) "강의실"
     , FN_SUBJECT(SO.SUBJECT_CODE)"과목명"
     , CO.START_DATE "시작일자", CO.END_DATE "종료일자", CO.OPEN_DATE "개설일자"
     , FN_TEXTBOOK(SO.TEXTBOOK_CODE) "교재명"
     , FN_TEACHER_REGISTER(CO.TEACHER_CODE) "교수자명"
  FROM COURSE_OPEN CO JOIN SUBJECT_OPEN SO
    ON CO.OP_COURSE_CODE = SO.OP_COURSE_CODE;

--------------------------------------------------------------------------------

-- [중도탈락]
--○ 중도탈락학생 조회 VIEW
CREATE OR REPLACE VIEW VIEW_DROP_STUDENT_CK
AS
SELECT CR.REG_COURSE_CODE "수강신청코드", SR.NAME "학생명", SD.DROP_DATE "중도탈락일자"
     , CASE WHEN DROP_CODE IS NOT NULL THEN '중도탈락한 학생' ELSE '중도탈락하지 않은 학생' END "중도탈락여부"
     , DR.DETAIL "중도탈락사유"
FROM STUDENT_REGISTER SR, COURSE_REGISTER CR, STUDENT_DROP SD, DROP_REASON DR
WHERE SR.STUDENT_CODE = CR.STUDENT_CODE
  AND CR.REG_COURSE_CODE = SD.REG_COURSE_CODE
  AND SD.DR_REASON_CODE = DR.DR_REASON_CODE(+);

--------------------------------------------------------------------------------

--○ 관리자의 학생 정보 출력 VIEW
CREATE OR REPLACE VIEW VIEW_MA_STD
AS
SELECT SR.NAME "학생이름", C.COURSE_CODE "과정명", S.SUBJECT_NAME "수강과목"
     , (SI.ATTENDANCE_SCORE*SO.ATTENDANCE_RATE*0.01+ SI.WRITING_SCORE*SO.WRITING_RATE*0.01 
      + SI.PERFORMANCE_SCORE*SO.PERFORMANCE_RATE*0.01)  "수강과목총점"
FROM STUDENT_REGISTER SR, COURSE_REGISTER CR, COURSE_OPEN CO
   , COURSE C, SUBJECT_OPEN SO, SUBJECT S, SCORE_INPUT SI
WHERE SR.STUDENT_CODE = CR.STUDENT_CODE
  AND C.COURSE_CODE = CO.COURSE_CODE
  AND CO.OP_COURSE_CODE = CR.OP_COURSE_CODE
  AND CR.REG_COURSE_CODE = SI.REG_COURSE_CODE
  AND SI.OP_SUBJECT_CODE = SO.OP_SUBJECT_CODE
  AND SO.SUBJECT_CODE = S.SUBJECT_CODE;
  
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--● PROCEDURE
--------------------------------------------------------------------------------

-- [공통]
--○ 로그인 프로시저 PRC_LOGIN(ID,PW)
CREATE OR REPLACE PROCEDURE PRC_LOGIN
( V_CODE  IN MANAGER_REGISTER.MANAGER_CODE%TYPE --관리자PK, 학생PK, 교수PK 모두 VARCHAR2(10)
, V_PW    IN MANAGER_REGISTER.PASSWORD%TYPE     --관리자PW, 학생PW, 교수PW 모두 VARCHAR2(30)
)
IS
    V_CHECKID NUMBER;   --일치1, 불일치0
    V_CHECKPW NUMBER;   --일치1, 불일치0
    
    USER_DEFINE_ERROR1 EXCEPTION;           -- ID 없음 에러
    USER_DEFINE_ERROR2 EXCEPTION;           -- 불일치 에러
BEGIN
    V_CHECKID := FN_ID_CHECK(V_CODE);
    V_CHECKPW := FN_PW_CHECK(V_CODE, V_PW);
   
    -- 로그인 IF문
    IF (V_CHECKID = 1 AND V_CHECKPW = 1)
        THEN DBMS_OUTPUT.PUT_LINE('로그인 성공~!!!');
    ELSIF (V_CHECKID = 0)
        THEN RAISE USER_DEFINE_ERROR1;
    ELSE
        RAISE USER_DEFINE_ERROR2;
    END IF;
    
    -- 로그인 실패 예외 처리
    EXCEPTION
       WHEN USER_DEFINE_ERROR1
            THEN RAISE_APPLICATION_ERROR(-20100, '해당 아이디가 존재하지 않습니다.');
                ROLLBACK;
       WHEN USER_DEFINE_ERROR2
            THEN RAISE_APPLICATION_ERROR(-20103, '아이디, 비밀번호가 일치하지 않습니다.');
                ROLLBACK;
       WHEN OTHERS
            THEN ROLLBACK;

    -- 커밋
    COMMIT;
END;

--------------------------------------------------------------------------------

-- [관리자]
--○ 관리자계정 PW변경 프로시저 PRC_MA_PW_CHANGE(ID,PW,NEWPW)
CREATE OR REPLACE PROCEDURE PRC_MA_PW_CHANGE
( V_CODE  IN MANAGER_REGISTER.MANAGER_CODE%TYPE
, V_PW    IN MANAGER_REGISTER.PASSWORD%TYPE
, V_NEWPW IN MANAGER_REGISTER.PASSWORD%TYPE)
IS
    V_PW2 MANAGER_REGISTER.PASSWORD%TYPE;
    
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    
    SELECT PASSWORD INTO V_PW2
    FROM MANAGER_REGISTER
    WHERE MANAGER_CODE = V_CODE;
    
    IF (V_PW = V_PW2)
        THEN UPDATE MANAGER_REGISTER
             SET PASSWORD = V_NEWPW
             WHERE MANAGER_CODE = V_CODE;
    ELSE
        RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- 커밋
    COMMIT;
    
    EXCEPTION
       WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20103, '아이디, 비밀번호가 일치하지 않습니다.');
            ROLLBACK;
END;

--------------------------------------------------------------------------------

-- 과정개설테이블에 데이터 넣는 프로시저
CREATE OR REPLACE PROCEDURE PRC_OP_COU_INSERT
(N_CODE      IN COURSE.COURSE_CODE%TYPE                     --과정코드
,N_SDATE    IN COURSE_OPEN.START_DATE%TYPE                  --시작날짜
,N_EDATE    IN COURSE_OPEN.END_DATE%TYPE                    --종료날짜
,N_CLACODE      IN CLASSROOM_REGISTER.CLASSROOM_CODE%TYPE     --강의실코드. 
)
IS
    V_OP_COURSE_CODE    COURSE_OPEN.OP_COURSE_CODE%TYPE;    -- 과정개설코드   C1 C2 C2...
BEGIN
    
    -- 과정개설코드 자동으로 부여
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(OP_COURSE_CODE,2))),0) + 1 INTO V_OP_COURSE_CODE
    FROM COURSE_OPEN;
    
    V_OP_COURSE_CODE := 'C' || V_OP_COURSE_CODE;
    
    INSERT INTO COURSE_OPEN
    (OP_COURSE_CODE ,COURSE_CODE ,CLASSROOM_CODE ,START_DATE ,END_DATE) 
    VALUES(V_OP_COURSE_CODE,  N_CODE,N_CLACODE, TO_DATE(N_SDATE,'YYYY-MM-DD') ,TO_DATE(N_EDATE,'YYYY-MM-DD'));
    
END;

--------------------------------------------------------------------------------

--○ 교수정보 삭제 트리거 TRG_TC_DELETE
CREATE OR REPLACE TRIGGER TRG_TC_DELETE
       BEFORE
       DELETE ON TEACHER_REGISTER
       FOR EACH ROW
BEGIN
    UPDATE COURSE_OPEN
    SET TEACHER_CODE = NULL
    WHERE TEACHER_CODE = :OLD.TEACHER_CODE; 
END;

--○ 교수정보 삭제 프로시저
CREATE OR REPLACE PROCEDURE PRC_TC_DELETE
( V_TEACHER_CODE    TEACHER_REGISTER.TEACHER_CODE%TYPE
)
IS
    TEACHER_IS_NULL_CHECK   NUMBER;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEACHER_IS_NULL_CHECK
    FROM TEACHER_REGISTER
    WHERE TEACHER_CODE = V_TEACHER_CODE;
    
    IF (TEACHER_IS_NULL_CHECK = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    DELETE
    FROM TEACHER_REGISTER
    WHERE TEACHER_CODE = V_TEACHER_CODE;
    
    --COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20504, '교수가 존재하지 않습니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;

--------------------------------------------------------------------------------

--○ 관리자의 교수자 정보 변경 프로시저 TEACHER_REGISTER_UPDATE(ID,PW,이름,주민번호,수정일자)
CREATE OR REPLACE PROCEDURE TEACHER_REGISTER_UPDATE
( V_TC_COD        IN TEACHER_REGISTER.TEACHER_CODE%TYPE
, V_PW            IN TEACHER_REGISTER.PASSWORD%TYPE
, V_NAME          IN TEACHER_REGISTER.NAME%TYPE
, V_SSN           IN TEACHER_REGISTER.SSN%TYPE
, V_REG_DATE      IN TEACHER_REGISTER.REGISTER_DATE%TYPE
)
IS
    TEMP_TC_COD     NUMBER;
    
    TC_COD_ERROR    EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_TC_COD
      FROM TEACHER_REGISTER
     WHERE TEACHER_CODE = V_TC_COD;
    
    IF(TEMP_TC_COD = 0)
        THEN RAISE TC_COD_ERROR;
    END IF;
    
    UPDATE TEACHER_REGISTER
       SET PASSWORD = V_PW, NAME = V_NAME, SSN = V_SSN
         , REGISTER_DATE = V_REG_DATE
     WHERE TEACHER_CODE = V_TC_COD;

    EXCEPTION
        WHEN TC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20202, '유효한 교수가 아닙니다.');
END;

--------------------------------------------------------------------------------

--○ 학생 등록 삭제 PRC_STD_DELETE(학생ID)
CREATE OR REPLACE PROCEDURE PRC_STD_DELETE
(V_STD_COD IN STUDENT_REGISTER.STUDENT_CODE%TYPE)
IS
    TEMP_STD_COD   NUMBER; 
    TEMP_STD_FK    NUMBER;
    STD_COD_ERROR   EXCEPTION; 
    STD_DEL_ERROR   EXCEPTION; 
BEGIN
    SELECT COUNT(*) INTO TEMP_STD_COD
    FROM STUDENT_REGISTER
    WHERE STUDENT_CODE = V_STD_COD;    
     
    SELECT COUNT(*) INTO TEMP_STD_FK
    FROM COURSE_REGISTER
    WHERE STUDENT_CODE = V_STD_COD;        

    IF ( TEMP_STD_COD  = 0)   
        THEN RAISE STD_COD_ERROR;
    ELSIF (TEMP_STD_FK <> 0  )
        THEN RAISE STD_DEL_ERROR;
    END IF; 
    
    DELETE 
    FROM STUDENT_REGISTER
    WHERE STUDENT_CODE = V_STD_COD;
    
    EXCEPTION       
        WHEN STD_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20505, '학생이 존재하지 않습니다.');
            ROLLBACK;           
        WHEN STD_DEL_ERROR
            THEN RAISE_APPLICATION_ERROR(-20206, '해당 학생이 참조되고 있으므로 삭제가 불가능합니다.');
            ROLLBACK;        
        WHEN OTHERS
            THEN ROLLBACK;
     COMMIT;
END;

--------------------------------------------------------------------------------

--○ 과정개설 정보 변경 프로시저 
--   PRC_OP_COU_UPDATE(과정개설코드,과정코드,교수ID,강의실코드,시작일자,종료일자,개설일자)
CREATE OR REPLACE PROCEDURE PRC_OP_COU_UPDATE
( V_OPC_COD         IN COURSE_OPEN.OP_COURSE_CODE%TYPE
, V_COU_COD         IN COURSE_OPEN.COURSE_CODE%TYPE
, V_TC_COD          IN COURSE_OPEN.TEACHER_CODE%TYPE
, V_CLAS_COD        IN COURSE_OPEN.CLASSROOM_CODE%TYPE
, V_SDATE           IN COURSE_OPEN.START_DATE%TYPE
, V_EDATE           IN COURSE_OPEN.END_DATE%TYPE
, V_OPDATE          IN COURSE_OPEN.OPEN_DATE%TYPE 
)
IS
    TEMP_OPC_COD    NUMBER;
    TEMP_COU_COD    NUMBER;
    TEMP_TC_COD     NUMBER;
    TEMP_CLAS_COD   NUMBER;
    
    OPC_COD_ERROR   EXCEPTION;  -- 과정코드가 존재하지 않을 경우
    COU_COD_ERROR   EXCEPTION;  -- 과목코드가 존재하지 않을 경우
    TC_COD_ERROR    EXCEPTION;  -- 교수코드가 존재하지 않을 경우
    CLAS_COD_ERROR  EXCEPTION;  -- 강의실코드가 존재하지 않을 경우
    DATE_ERROR1     EXCEPTION;  -- 날짜가 적합하지 않은 경우 발생하는 에러
BEGIN
    -- 과정코드 존재 확인
    SELECT COUNT(*) INTO TEMP_OPC_COD
      FROM COURSE_OPEN
     WHERE OP_COURSE_CODE = V_OPC_COD;
     
    IF (TEMP_OPC_COD = 0)
        THEN RAISE OPC_COD_ERROR;
    END IF;
    
    -- 과목코드 존재확인
    SELECT COUNT(*) INTO TEMP_COU_COD
      FROM COURSE
     WHERE COURSE_CODE = V_COU_COD;
    
    IF(TEMP_COU_COD = 0)
        THEN RAISE COU_COD_ERROR;
    END IF;
    
    -- 교수코드 확인
    SELECT COUNT(*) INTO TEMP_TC_COD
      FROM TEACHER_REGISTER
     WHERE TEACHER_CODE = V_TC_COD;
    
    IF(TEMP_TC_COD = 0)
        THEN RAISE TC_COD_ERROR;
    END IF;
    
    -- 강의실 코드 확인
    SELECT COUNT(*) INTO TEMP_CLAS_COD
      FROM CLASSROOM_REGISTER
     WHERE CLASSROOM_CODE = V_CLAS_COD;
    
    IF(TEMP_CLAS_COD = 0)
        THEN RAISE CLAS_COD_ERROR;
    END IF;
    
    -- 날짜 확인
    IF((V_SDATE > V_EDATE) OR (V_OPDATE > V_EDATE))
        THEN RAISE DATE_ERROR1;
    END IF;

    UPDATE COURSE_OPEN
       SET COURSE_CODE = V_COU_COD, TEACHER_CODE = V_TC_COD
         , CLASSROOM_CODE = V_CLAS_COD
         , START_DATE = V_SDATE, END_DATE = V_EDATE
         , OPEN_DATE = V_OPDATE
     WHERE OP_COURSE_CODE = V_OPC_COD;
     
    COMMIT;
    
    EXCEPTION
        WHEN OPC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
            ROLLBACK;
        WHEN COU_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
        WHEN TC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20202, '유효한 교수가 아닙니다.');
        WHEN CLAS_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20203, '유효한 강의실이 아닙니다.');
        WHEN DATE_ERROR1
            THEN RAISE_APPLICATION_ERROR(-20204, '날짜를 확인하세요.');
        WHEN OTHERS
            THEN ROLLBACK;
END;

--------------------------------------------------------------------------------

--○ 과정개설 삭제 프로시저 PRC_OP_COU_DELETE(과정개설코드)
CREATE OR REPLACE PROCEDURE PRC_OP_COU_DELETE
(V_OP_COU_COD  IN COURSE_OPEN.OP_COURSE_CODE%TYPE)
IS
    TEMP_OP_COU_COD   NUMBER; 
    TEMP_OP_COU_FK    NUMBER;
    OP_COU_COD_ERROR   EXCEPTION; 
    OP_COU_DEL_ERROR   EXCEPTION; 
BEGIN
    SELECT COUNT(*) INTO TEMP_OP_COU_COD
    FROM COURSE_OPEN
     WHERE OP_COURSE_CODE = V_OP_COU_COD;    
     
    SELECT COUNT(*) INTO TEMP_OP_COU_FK
    FROM COURSE_REGISTER
     WHERE OP_COURSE_CODE = V_OP_COU_COD;        

    IF (TEMP_OP_COU_COD  = 0)   
        THEN RAISE OP_COU_COD_ERROR;
    ELSIF (TEMP_OP_COU_FK <> 0  )
        THEN RAISE OP_COU_DEL_ERROR;
    END IF; 

    DELETE
    FROM COURSE_OPEN
    WHERE OP_COURSE_CODE = V_OP_COU_COD;
    
     EXCEPTION       
        WHEN OP_COU_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
            ROLLBACK;           
        WHEN OP_COU_DEL_ERROR
            THEN RAISE_APPLICATION_ERROR(-20206, '해당 과정은 참조되고 있으므로 삭제가 불가능합니다.');
            ROLLBACK;        
        WHEN OTHERS
            THEN ROLLBACK;
     COMMIT;
END;

--------------------------------------------------------------------------------

--○ 과정 변경 프로시저 PRC_COURSE_UPDATE(과정코드,과정명)
CREATE OR REPLACE PROCEDURE PRC_COURSE_UPDATE
( V_COU_COD     IN COURSE.COURSE_CODE%TYPE
, V_COU_NAME    IN COURSE.COURSE_NAME%TYPE
)
IS
    TEMP_COU_COD    NUMBER;
    
    COU_COD_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_COU_COD
      FROM COURSE
     WHERE COURSE_CODE = V_COU_COD;
     
    IF (TEMP_COU_COD = 0)
        THEN RAISE COU_COD_ERROR;
    END IF;

    UPDATE COURSE
       SET COURSE_NAME = V_COU_NAME
     WHERE COURSE_CODE = V_COU_COD;
     
    EXCEPTION
        WHEN COU_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 과정 삭제 프로시저 PRC_COURSE_DELETE(과정코드)
CREATE OR REPLACE PROCEDURE PRC_COURSE_DELETE
(V_COU_COD  IN COURSE.COURSE_CODE%TYPE)
IS
    TEMP_COU_COD    NUMBER;
    TEMP_COU_FK    NUMBER;
    COU_COD_ERROR   EXCEPTION; 
    COU_DEL_ERROR   EXCEPTION; 
BEGIN
    SELECT COUNT(*) INTO TEMP_COU_COD
      FROM COURSE
     WHERE COURSE_CODE = V_COU_COD;      
     
    SELECT COUNT(*) INTO TEMP_COU_FK
      FROM COURSE_OPEN
     WHERE COURSE_CODE = V_COU_COD;   
                                      
    IF(TEMP_COU_COD = 0)   
        THEN RAISE COU_COD_ERROR;
    ELSIF (TEMP_COU_FK <> 0)
        THEN RAISE COU_DEL_ERROR;
    END IF;
    
    -- DELETE
    DELETE
      FROM COURSE
     WHERE COURSE_CODE = V_COU_COD;
     
    EXCEPTION       
        WHEN COU_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
            ROLLBACK;         
        WHEN COU_DEL_ERROR 
            THEN RAISE_APPLICATION_ERROR(-20206, '해당 과정은 참조되고 있으므로 삭제가 불가능합니다.');
            ROLLBACK; 
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 과목변경 프로시저
CREATE OR REPLACE PROCEDURE PRC_SUB_OPEN_UPDATE
( V_OPS_COD         IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_SUB_COD         IN SUBJECT_OPEN.SUBJECT_CODE%TYPE
, V_TXT_COD         IN SUBJECT_OPEN.TEXTBOOK_CODE%TYPE
, V_OPC_COD         IN SUBJECT_OPEN.OP_COURSE_CODE%TYPE
, V_SDATE           IN SUBJECT_OPEN.START_DATE%TYPE
, V_EDATE           IN SUBJECT_OPEN.END_DATE%TYPE
)
IS
    TEMP_OPS_COD        NUMBER;
    TEMP_SUB_COD        NUMBER;
    TEMP_TXT_COD        NUMBER;
    TEMP_OPC_COD        NUMBER;
    
    
    OPS_COD_ERROR   EXCEPTION;
    SUB_COD_ERROR   EXCEPTION;
    TXT_COD_ERROR   EXCEPTION;
    OPC_COD_ERROR   EXCEPTION;
    DATE_ERROR      EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_OPS_COD
      FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OPS_COD;

    SELECT COUNT(*) INTO TEMP_SUB_COD
      FROM SUBJECT_OPEN
     WHERE SUBJECT_CODE = V_SUB_COD;

    SELECT COUNT(*) INTO TEMP_TXT_COD
      FROM SUBJECT_OPEN
     WHERE TEXTBOOK_CODE = V_TXT_COD;

    SELECT COUNT(*) INTO TEMP_OPC_COD
      FROM SUBJECT_OPEN
     WHERE OP_COURSE_CODE = V_OPC_COD;
     
    IF (TEMP_OPS_COD = 0)
        THEN RAISE OPS_COD_ERROR;
    ELSIF (TEMP_SUB_COD = 0)
        THEN RAISE SUB_COD_ERROR;
    ELSIF (TEMP_TXT_COD = 0)
        THEN RAISE TXT_COD_ERROR;
    ELSIF (TEMP_OPC_COD = 0)
        THEN RAISE OPC_COD_ERROR;
    END IF;
    
    IF(V_SDATE > V_EDATE)
        THEN RAISE DATE_ERROR;
    END IF;
     
    UPDATE SUBJECT_OPEN
       SET SUBJECT_CODE = V_SUB_COD, TEXTBOOK_CODE = V_TXT_COD
         , OP_COURSE_CODE = V_OPC_COD
         , START_DATE = V_SDATE, END_DATE = V_EDATE
     WHERE OP_SUBJECT_CODE = V_OPS_COD;
    
    EXCEPTION
        WHEN OPS_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20310, '유효한 과목코드가 아닙니다.');
            ROLLBACK;
        WHEN SUB_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
            ROLLBACK;
        WHEN TXT_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20307, '유효한 교재가 아닙니다.');
            ROLLBACK;
        WHEN OPC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20201, '유효한 과정이 아닙니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20204, '날짜를 확인하세요.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 과목 변경 프로시저 PRC_SUB_MANEDIT(과목코드,과목명)
CREATE OR REPLACE PROCEDURE PRC_SUB_MANEDIT
( V_SUB_COD    IN SUBJECT.SUBJECT_CODE%TYPE
, V_SUB_NAME   IN SUBJECT.SUBJECT_NAME%TYPE
)
IS
    TEMP_SUB_COD    NUMBER;
    
    SUB_COD_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_SUB_COD
      FROM SUBJECT
     WHERE SUBJECT_CODE = V_SUB_COD;
     
    IF(TEMP_SUB_COD = 0)
        THEN RAISE SUB_COD_ERROR;
    END IF;

    --UPDATE
    UPDATE SUBJECT
    SET SUBJECT_NAME = V_SUB_NAME
    WHERE SUBJECT_CODE = V_SUB_COD;  

    EXCEPTION
        WHEN SUB_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;   
END;

--------------------------------------------------------------------------------

--○ 과목 삭제 프로시저 PRC_SUBJECT_DELETE(과목코드)
CREATE OR REPLACE PROCEDURE PRC_SUBJECT_DELETE
(V_SUB_COD IN SUBJECT.SUBJECT_CODE%TYPE
)
IS
    TEMP_SUB_COD    NUMBER;
    TEMP_SUB_FK     NUMBER;
    SUB_COD_ERROR   EXCEPTION;
    SUB_DEL_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_SUB_COD
      FROM SUBJECT
     WHERE SUBJECT_CODE = V_SUB_COD; 
     
     SELECT COUNT(*) INTO TEMP_SUB_FK
     FROM SUBJECT_OPEN
     WHERE SUBJECT_CODE = V_SUB_COD;
                                      
    IF(TEMP_SUB_COD = 0)   
        THEN RAISE SUB_COD_ERROR;
    ELSIF (TEMP_SUB_FK <> 0)
        THEN RAISE SUB_DEL_ERROR;
    END IF;
    -- DELETE
    DELETE
      FROM SUBJECT
     WHERE SUBJECT_CODE = V_SUB_COD; 
     
    EXCEPTION       
        WHEN SUB_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
        WHEN SUB_DEL_ERROR
            THEN RAISE_APPLICATION_ERROR(-20308, '해당 과목은 참조되고 있으므로 삭제가 불가능합니다.');
            ROLLBACK;           
        WHEN OTHERS
            THEN ROLLBACK;
     COMMIT;
END;

--------------------------------------------------------------------------------

--○ 과목개설 삭제 프로시저 PRC_OP_SUB_DELETE(과목개설코드)
CREATE OR REPLACE PROCEDURE PRC_OP_SUB_DELETE
(V_OP_SUB_COD  IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE)
IS
    TEMP_OP_SUB_COD   NUMBER; 
    TEMP_OP_SUB_FK    NUMBER;
    OP_SUB_COD_ERROR   EXCEPTION; 
    OP_SUB_DEL_ERROR   EXCEPTION; 
BEGIN
    SELECT COUNT(*) INTO TEMP_OP_SUB_COD 
    FROM SUBJECT_OPEN
     WHERE OP_SUBJECT_CODE = V_OP_SUB_COD;    
     
    SELECT COUNT(*) INTO TEMP_OP_SUB_FK 
    FROM SCORE_INPUT
     WHERE OP_SUBJECT_CODE = V_OP_SUB_COD;       

    
    IF (TEMP_OP_SUB_COD  = 0)   
        THEN RAISE OP_SUB_COD_ERROR;
    ELSIF (TEMP_OP_SUB_FK  <> 0  )
        THEN RAISE OP_SUB_DEL_ERROR;
    END IF; 

    DELETE
    FROM SUBJECT_OPEN
    WHERE OP_SUBJECT_CODE = V_OP_SUB_COD;
    
     EXCEPTION       
        WHEN OP_SUB_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
            ROLLBACK;           
        WHEN OP_SUB_DEL_ERROR
            THEN RAISE_APPLICATION_ERROR(-20308, '해당 과목은 참조되고 있으므로 삭제가 불가능합니다.');
            ROLLBACK;        
        WHEN OTHERS
            THEN ROLLBACK;
     COMMIT;
END;

--------------------------------------------------------------------------------

--○ 교재 변경 프로시저 PRC_TEXTBOOK_UPDATE(교재코드,교재명,출판사)
CREATE OR REPLACE PROCEDURE PRC_TEXTBOOK_UPDATE
( V_TXT_COD     IN TEXTBOOK.TEXTBOOK_CODE%TYPE
, V_TXT_NAME    IN TEXTBOOK.TEXTBOOK_NAME%TYPE
, V_PUBLISH     IN TEXTBOOK.PUBLISHER%TYPE
)
IS
    TEMP_TXT_COD    NUMBER;
    
    TXT_COD_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_TXT_COD
      FROM TEXTBOOK
     WHERE TEXTBOOK_CODE = V_TXT_COD;
     
    IF (TEMP_TXT_COD = 0)
        THEN RAISE TXT_COD_ERROR;
    END IF;
    
    UPDATE TEXTBOOK
       SET TEXTBOOK_NAME = V_TXT_NAME
         , PUBLISHER = V_PUBLISH
     WHERE TEXTBOOK_CODE = V_TXT_COD;
     
     EXCEPTION
        WHEN TXT_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20307, '유효한 교재가 아닙니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 교재 삭제 프로시저
CREATE OR REPLACE PROCEDURE PRC_TEXTBOOK_DELETE
(V_TXT_COD    IN TEXTBOOK.TEXTBOOK_CODE%TYPE
)
IS 
    TEMP_TXT_COD    NUMBER;
    TEMP_TXT_FK     NUMBER;
    TXT_COD_ERROR   EXCEPTION;
    TXT_DEL_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_TXT_COD
    FROM TEXTBOOK
    WHERE TEXTBOOK_CODE = V_TXT_COD;
    
    SELECT COUNT(*) INTO TEMP_TXT_FK
    FROM SUBJECT_OPEN
    WHERE TEXTBOOK_CODE = V_TXT_COD;
    
    IF (TEMP_TXT_COD = 0)
    THEN RAISE TXT_COD_ERROR;
    ELSIF (TEMP_TXT_FK <> 0)
    THEN RAISE TXT_DEL_ERROR;
    END IF;
    
    DELETE
    FROM TEXTBOOK
    WHERE TEXTBOOK_CODE = V_TXT_COD;
    
        EXCEPTION       
        WHEN TXT_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20307, '유효한 교재가 아닙니다.');
            ROLLBACK;           
        WHEN TXT_DEL_ERROR
            THEN RAISE_APPLICATION_ERROR(-20309, '해당 교재는 참조되고 있으므로 삭제가 불가능합니다.');
            ROLLBACK;        
        WHEN OTHERS
            THEN ROLLBACK;
     COMMIT;
END;

--------------------------------------------------------------------------------

--○ 강의실 삭제 프로시저 PRC_CLASSROOM_DLETE(강의실코드)
CREATE OR REPLACE PROCEDURE PRC_CLASSROOM_DLETE
(V_CLAS_COD   IN CLASSROOM_REGISTER.CLASSROOM_CODE%TYPE)
IS
    TEMP_CLAS_COD   NUMBER; 
    TEMP_CLAS_FK    NUMBER;
    CLAS_COD_ERROR   EXCEPTION; 
    CLAS_DEL_ERROR   EXCEPTION; 
BEGIN
    SELECT COUNT(*) INTO TEMP_CLAS_COD
      FROM CLASSROOM_REGISTER
     WHERE CLASSROOM_CODE = V_CLAS_COD;    
     
    SELECT COUNT(*) INTO TEMP_CLAS_FK
      FROM COURSE_OPEN
     WHERE CLASSROOM_CODE = V_CLAS_COD;        

    IF (TEMP_CLAS_COD  = 0)   
        THEN RAISE CLAS_COD_ERROR;
    ELSIF (TEMP_CLAS_FK <> 0  )
        THEN RAISE CLAS_DEL_ERROR;
    END IF; 

    -- DELETE
    DELETE
      FROM CLASSROOM_REGISTER
     WHERE CLASSROOM_CODE = V_CLAS_COD;      

    EXCEPTION       
        WHEN CLAS_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20203, '유효한 강의실이 아닙니다.');
            ROLLBACK;           
        WHEN CLAS_DEL_ERROR 
            THEN RAISE_APPLICATION_ERROR(-20205, '해당 강의실은 참조되고 있으므로 삭제가 불가능합니다.');
            ROLLBACK;        
        WHEN OTHERS
            THEN ROLLBACK;         
    COMMIT;
END;

--------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE PRC_OP_SUB_INSERT
(V_OP_COURSE_CODE   IN COURSE_OPEN.OP_COURSE_CODE%TYPE     --과정개설코드
,V_SUBJECT_CODE     IN SUBJECT.SUBJECT_CODE%TYPE           --과목코드
,V_START_DATE       IN SUBJECT_OPEN.START_DATE%TYPE        --시작날짜
,V_END_DATE         IN SUBJECT_OPEN.END_DATE%TYPE          --종료날짜
,V_TEXTBOOK_CODE    IN TEXTBOOK.TEXTBOOK_CODE%TYPE         --교재코드
,V_TEACHER_CODE     IN TEACHER_REGISTER.TEACHER_CODE%TYPE  --교수코드
)
IS
    --주요 변수 선언
    V_OP_SUBJECT_CODE    SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE; --과목개설코드 OSC1 OSC2 OSC3...
    
    V_TCCODE    TEACHER_REGISTER.TEACHER_CODE%TYPE; -- 과정의 교수담는 변수
    
    V_SUB_COUNT  NUMBER;  -- 과정안에 과목 몇개있는지 세는 변수.
    V_COU_SDATE COURSE_OPEN.START_DATE%TYPE;    --과정시작날짜
    V_COU_EDATE COURSE_OPEN.END_DATE%TYPE;      --과정종료날짜
    V_SUB_EDATE SUBJECT_OPEN.END_DATE%TYPE;     --과목종료날짜
    
    USER_DEFINE_ERROR1  EXCEPTION;  -- 20303, '담당 교수가 배정되지 않은 과목입니다.'                       
    USER_DEFINE_ERROR2  EXCEPTION;  -- 20304, '입력정보의 교수와 해당과정의 교수가 일치하지 않습니다.'
    USER_DEFINE_ERROR3  EXCEPTION;  -- 20305,'과목기간이 과정기간에 포함되지 않습니다.'
    USER_DEFINE_ERROR4  EXCEPTION;  -- 20306,'과목기간이 중복됩니다. 다시 확인해주세요'
BEGIN  
    -- 해당 과정의 교수코드를 받아서 변수값에 담는다.
    SELECT TEACHER_CODE INTO V_TCCODE
    FROM COURSE_OPEN
    WHERE OP_COURSE_CODE = V_OP_COURSE_CODE;
   
    -- 교수코드가 NULL 이면 에러발생.
    IF (V_TCCODE IS NULL)
    THEN RAISE USER_DEFINE_ERROR1;
    -- 교수코드가 개설과정의 교수코드와 다르면 에러발생.
    ELSIF (V_TEACHER_CODE != V_TCCODE)
    THEN RAISE USER_DEFINE_ERROR2;
    END IF;
    
    -- 1. 과정시작날짜, 종료날짜 변수값 담기.
    SELECT START_DATE, END_DATE INTO V_COU_SDATE, V_COU_EDATE
    FROM COURSE_OPEN
    WHERE OP_COURSE_CODE = V_OP_COURSE_CODE;
    
    -- 에러발생경우
    IF (V_COU_SDATE - V_START_DATE > 0 OR V_END_DATE - V_COU_EDATE > 0)
    THEN RAISE USER_DEFINE_ERROR3;
    END IF;
      
    SELECT MAX(END_DATE) INTO V_SUB_EDATE
    FROM SUBJECT_OPEN
    WHERE OP_COURSE_CODE = V_OP_COURSE_CODE;
    
    IF (V_SUB_EDATE IS NOT NULL AND (V_SUB_EDATE - V_START_DATE > 0))
    THEN RAISE USER_DEFINE_ERROR4;
    END IF;

   
    -- 과목개설코드에 값 담아내기
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(OP_SUBJECT_CODE,3))),0) + 1 INTO V_OP_SUBJECT_CODE
    FROM SUBJECT_OPEN;
    
    V_OP_SUBJECT_CODE := 'OSC' || V_OP_SUBJECT_CODE;
    
    
    -- INSERT 쿼리문
    INSERT INTO SUBJECT_OPEN
    (OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, OP_COURSE_CODE, START_DATE, END_DATE)
    VALUES(V_OP_SUBJECT_CODE, V_SUBJECT_CODE, V_TEXTBOOK_CODE, V_OP_COURSE_CODE, TO_DATE(V_START_DATE,'YYYY-MM-DD') ,TO_DATE(V_END_DATE,'YYYY-MM-DD') );

    --예외처리
    EXCEPTION
        WHEN USER_DEFINE_ERROR1
        THEN RAISE_APPLICATION_ERROR(-20303, '담당 교수가 배정되지 않은 과목입니다.');
        ROLLBACK;
        WHEN USER_DEFINE_ERROR2
        THEN RAISE_APPLICATION_ERROR(-20304, '입력정보의 교수와 해당과정의 교수가 일치하지 않습니다.');
        ROLLBACK;
        WHEN USER_DEFINE_ERROR3
        THEN RAISE_APPLICATION_ERROR(-20305,'과목기간이 과정기간에 포함되지 않습니다.');
        ROLLBACK;
        WHEN USER_DEFINE_ERROR4
        THEN RAISE_APPLICATION_ERROR(-20306,'과목기간이 중복됩니다. 다시 확인해주세요');
        ROLLBACK;
    --커밋
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 관리자가 과목정보를 출력하는 프로시저 PRC_SUB_OP_SELECT(과목코드)
CREATE OR REPLACE PROCEDURE PRC_SUB_OP_SELECT
(V_CODE     IN MANAGER_REGISTER.MANAGER_CODE%TYPE
)
IS  
    -- 커서 데이터 담는 변수 선언
    V_CNAME     COURSE.COURSE_NAME%TYPE;        --과정명
    V_CLANAME   CLASSROOM_REGISTER.CLASSROOM_NAME%TYPE; -- 강의실명
    V_SUB_NAME  SUBJECT.SUBJECT_NAME%TYPE;      --과목명
    V_SDATE     SUBJECT_OPEN.START_DATE%TYPE;   --과목시작날짜
    V_EDATE     SUBJECT_OPEN.END_DATE%TYPE;     --과목종료날짜
    V_TEXTBOOK  TEXTBOOK.TEXTBOOK_NAME%TYPE;    --교재명
    V_TC_NAME   TEACHER_REGISTER.NAME%TYPE;     --교수명
    
    -- 커서 정의
    CURSOR CUR_SUB_OP_SELECT
    IS
    SELECT T2.과정명, T2.강의실명, T1.과목명
       ,T1.과목시작날짜,T1.과목종료날짜
       ,T1.교재명, T2.교수자명
    FROM
    (
        SELECT SO.START_DATE "과목시작날짜"
               ,SO.END_DATE "과목종료날짜"
               ,S.SUBJECT_NAME "과목명"
               ,T.TEXTBOOK_NAME "교재명"
               ,SO.OP_COURSE_CODE "과정개설코드"
        FROM SUBJECT_OPEN SO JOIN SUBJECT S
        ON SO.SUBJECT_CODE = s.SUBJECT_CODE JOIN TEXTBOOK T
        ON SO.TEXTBOOK_CODE = T.TEXTBOOK_CODE
    )T1 JOIN
    (
        SELECT C.COURSE_NAME "과정명"
               ,CR.CLASSROOM_NAME "강의실명"
               ,CO.OP_COURSE_CODE "과정개설코드"
               ,TR.NAME "교수자명"
        FROM COURSE_OPEN CO JOIN COURSE C 
        ON CO.COURSE_CODE = C.COURSE_CODE JOIN CLASSROOM_REGISTER CR 
        ON CO.CLASSROOM_CODE = CR.CLASSROOM_CODE JOIN TEACHER_REGISTER TR
        ON CO.TEACHER_CODE = TR.TEACHER_CODE
    )T2
    ON T1.과정개설코드 = T2.과정개설코드;
    
    --등록된 관리자인지 판단하는 임시변수 선언
    V_TEMP  NUMBER; 
  
    -- 사용자 에러변수 선언 
    USER_DEFINE_ERROR1   EXCEPTION;  -- 20102,'관리자가 아닙니다. 교수정보출력은 관리자만 가능합니다'
    USER_DEFINE_ERROR2   EXCEPTION;  -- 20103,'등록된 관리자가 아닙니다.'

BEGIN
    -- 임시변수에 값 담기
    SELECT COUNT(*) INTO V_TEMP
    FROM MANAGER_REGISTER
    WHERE MANAGER_CODE = V_CODE;
    
    -- 관리자인지 확인. 관리자가 아니면 에러 발생.
    IF (SUBSTR(V_CODE,1,1) != 'M')
    THEN RAISE USER_DEFINE_ERROR1;
    -- 등록된 관리자가 아니면 에러 발생
    ELSIF (V_TEMP = 0)
    THEN RAISE USER_DEFINE_ERROR2;
    END IF;
    
    -- 커서 오픈
    OPEN CUR_SUB_OP_SELECT;
    
    LOOP
        FETCH CUR_SUB_OP_SELECT INTO V_CNAME,V_CLANAME,V_SUB_NAME,V_SDATE,V_EDATE,V_TEXTBOOK,V_TC_NAME ;
        
        EXIT WHEN CUR_SUB_OP_SELECT%NOTFOUND;

    END LOOP;
    
    -- 커서 클로즈
    CLOSE CUR_SUB_OP_SELECT;

    
    -- 예외처리
    EXCEPTION
    WHEN USER_DEFINE_ERROR1
    THEN RAISE_APPLICATION_ERROR(-20102, '관리자가 아닙니다. 교수정보출력은 관리자만 가능합니다.');
    ROLLBACK;
    WHEN USER_DEFINE_ERROR2
    THEN RAISE_APPLICATION_ERROR(-20103,'등록된 관리자가 아닙니다.');
    ROLLBACK;
    
    --커밋
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 관리자의 학생 정보 추가 프로시저 PRC_STD_INSERT
CREATE OR REPLACE PROCEDURE PRC_STD_INSERT
(   V_NAME  IN STUDENT_REGISTER.NAME%TYPE
,   V_SSN   IN STUDENT_REGISTER.SSN%TYPE
)
IS
    V_STUDENT_CODE   STUDENT_REGISTER.STUDENT_CODE%TYPE;
BEGIN
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(STUDENT_CODE, 2))), 0) + 1 INTO V_STUDENT_CODE
    FROM STUDENT_REGISTER;
    
    V_STUDENT_CODE := 'S' || LPAD(TO_CHAR(V_STUDENT_CODE),4,0);
    
    INSERT INTO STUDENT_REGISTER(NAME, SSN, STUDENT_CODE, PASSWORD)
    VALUES(V_NAME, V_SSN , V_STUDENT_CODE, SUBSTR(V_SSN,7));

    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 관리자의 학생정보 수정 프로시저 PRC_STU_REG_MANEDIT
CREATE OR REPLACE PROCEDURE PRC_STU_REG_MANEDIT
(V_STD_COD      IN STUDENT_REGISTER.STUDENT_CODE%TYPE  --(학생코드)
,V_PW           IN STUDENT_REGISTER.PASSWORD%TYPE      --(비밀번호)
,V_NAME         IN STUDENT_REGISTER.NAME%TYPE          --(학생명)
,V_SSN          IN STUDENT_REGISTER.SSN%TYPE           --(주민번호)
,V_REG_DATE     IN STUDENT_REGISTER.REGISTER_DATE%TYPE --(가입일자)
)
IS    
    TEMP_STD_COD    NUMBER;
    STD_COD_ERROR   EXCEPTION;
BEGIN     

    SELECT COUNT(*) INTO TEMP_STD_COD
    FROM STUDENT_REGISTER
    WHERE STUDENT_CODE = V_STD_COD;
    
    IF(TEMP_STD_COD=0)
        THEN RAISE STD_COD_ERROR;
    END IF;
    
    --UPDATE
    UPDATE STUDENT_REGISTER
    SET PASSWORD = V_PW,  NAME =  V_NAME  , SSN = V_SSN
    , REGISTER_DATE = V_REG_DATE
    WHERE STUDENT_CODE = V_STD_COD;
    
    EXCEPTION
        WHEN STD_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20104, '유효한 회원이 아닙니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
        
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 중도탈락코드 시퀀스 생성
CREATE SEQUENCE DR_STD_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 1;


--------------------------------------------------------------------------------

--○ 중도탈락 학생 입력 프로시저 PRC_DR_STD_INSERT
CREATE OR REPLACE PROCEDURE PRC_DR_STD_INSERT
( V_STUDENT_CODE        IN  STUDENT_REGISTER.STUDENT_CODE%TYPE
, V_REG_COURSE_CODE     IN  COURSE_REGISTER.REG_COURSE_CODE%TYPE
, V_DROP_DATE           IN  STUDENT_DROP.DROP_DATE%TYPE
, V_DR_REASON_CODE      IN  DROP_REASON.DR_REASON_CODE%TYPE
, V_DETAIL              IN  DROP_REASON.DETAIL%TYPE
)
IS 
    T_STUDENT_CODE          STUDENT_REGISTER.STUDENT_CODE%TYPE;
    T_REG_COURSE_CODE       COURSE_REGISTER.REG_COURSE_CODE%TYPE;
    T_DR_REASON_CODE        DROP_REASON.DR_REASON_CODE%TYPE;
    T_DROP_CODE             STUDENT_DROP.DROP_CODE%TYPE;    
    
    PK_NUMBER               NUMBER;
        
    USER_DEFINE_ERROR1       EXCEPTION;
    USER_DEFINE_ERROR2       EXCEPTION;
BEGIN
    -- 수강신청된 학생인지 조회
    -- 수강신청을 안 한 학생일 경우 NO_DATA_FOUND 발생
    SELECT STUDENT_CODE, REG_COURSE_CODE INTO T_STUDENT_CODE, T_REG_COURSE_CODE
    FROM COURSE_REGISTER
    WHERE STUDENT_CODE = V_STUDENT_CODE
      AND REG_COURSE_CODE = V_REG_COURSE_CODE;
    
    -- 이미 중도 탈락 테이블에 있는 학생인지 조회
    SELECT T.DROP_CODE INTO T_DROP_CODE
    FROM 
    (
        SELECT DROP_CODE
        FROM STUDENT_DROP
        WHERE REG_COURSE_CODE = T_REG_COURSE_CODE
    ) T RIGHT OUTER JOIN DUAL
    ON 1=1;
    
    IF (T_DROP_CODE IS NOT NULL)
        THEN RAISE USER_DEFINE_ERROR1;
    END IF;
    
    -- DR_REASON_CODE가 없으면 NULL값을 반환함.
    SELECT T.DR_REASON_CODE INTO T_DR_REASON_CODE
    FROM
    (
        SELECT DR_REASON_CODE
        FROM DROP_REASON
        WHERE DR_REASON_CODE = V_DR_REASON_CODE
    ) T RIGHT OUTER JOIN DUAL
    ON 1=1;
    
    -- 0번일 경우 중도탈락 사유를 새로 입력한다.
    IF (V_DR_REASON_CODE = 0)
        THEN SELECT NVL(MAX(DR_REASON_CODE), 0) INTO PK_NUMBER
             FROM DROP_REASON;
             
             INSERT INTO DROP_REASON (DR_REASON_CODE, DETAIL)
             VALUES (PK_NUMBER+1, V_DETAIL);
    
    -- 존재하지 않는 중도탈락 사유 번호를 접근했다. (에러)
    ELSIF ( T_DR_REASON_CODE IS NULL)
        THEN RAISE USER_DEFINE_ERROR2;
    
    -- 둘다 아니면 정상적인 접근이므로 중도탈락사유코드(PK) 가져옴.
    ELSE
        SELECT DR_REASON_CODE INTO PK_NUMBER
        FROM DROP_REASON
        WHERE DR_REASON_CODE = T_DR_REASON_CODE;
    END IF;
    
    -- 시퀀스 쓸 경우
    -- DROP_STUDENT 테이블에 데이터 입력
    INSERT INTO STUDENT_DROP(DROP_CODE, REG_COURSE_CODE, DR_REASON_CODE, DROP_DATE)
    VALUES(CONCAT('D', TO_CHAR(DR_STD_SEQ.NEXTVAL)), T_REG_COURSE_CODE, PK_NUMBER, V_DROP_DATE);
 
    
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20701,'해당 학생의 수강신청 내역이 없습니다.');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR1
            THEN RAISE_APPLICATION_ERROR(-20602, '중도탈락이 등록된 학생입니다.');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR2
            THEN RAISE_APPLICATION_ERROR(-20601, '존재하지 않는 중도탈락 사유입니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    -- 커밋
    COMMIT;
END;

--------------------------------------------------------------------------------

-- ○ 중도탈락 수정 프로시저 PRC_DR_RE_UPDATE(중도탈락사유코드, 중도상세사유)
CREATE OR REPLACE PROCEDURE PRC_DR_RE_UPDATE
( V_DR_REASON_CODE      IN  DROP_REASON.DR_REASON_CODE%TYPE
, V_DETAIL              IN  DROP_REASON.DETAIL%TYPE
)
IS
BEGIN
   
    -- 존재하지 않는 값일 경우 UPDATE 되지 않음.
    UPDATE DROP_REASON
    SET DETAIL = V_DETAIL
    WHERE DR_REASON_CODE = V_DR_REASON_CODE;
    
    EXCEPTION
        WHEN OTHERS
            THEN ROLLBACK;
            
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 중도탈락데이터 수정 프로시저 PRC_DR_STD_UPDATE(중도탈락코드, 중도탈락일자)
CREATE OR REPLACE PROCEDURE PRC_DR_STD_UPDATE
( V_DROP_CODE           IN  STUDENT_DROP.DROP_CODE%TYPE
, V_DROP_DATE           IN  STUDENT_DROP.DROP_DATE%TYPE)
IS
-- 중도탈락일자 UPDATE
BEGIN
    UPDATE STUDENT_DROP
    SET DROP_DATE = V_DROP_DATE
    WHERE DROP_CODE = V_DROP_CODE;
    
    EXCEPTION
        WHEN OTHERS
            THEN ROLLBACK;    
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 중도탈락 삭제 프로시저 PRC_DR_STD_DELETE
CREATE OR REPLACE PROCEDURE PRC_DR_STD_DELETE
( V_STUDENT_CODE        IN  STUDENT_REGISTER.STUDENT_CODE%TYPE
, V_REG_COURSE_CODE     IN  COURSE_REGISTER.REG_COURSE_CODE%TYPE
)
IS
    T_DROP_CODE             STUDENT_DROP.DROP_CODE%TYPE;
   
    USER_DEFINE_ERROR       EXCEPTION;
BEGIN
-- 이미 중도 탈락 테이블에 있는 학생인지 조회
    SELECT T.DROP_CODE INTO T_DROP_CODE
    FROM 
    (
        SELECT DROP_CODE
        FROM STUDENT_DROP
        WHERE REG_COURSE_CODE = V_REG_COURSE_CODE
    ) T RIGHT OUTER JOIN DUAL
    ON 1=1;
    
-- 중도탈락학생이라면 중도탈락코드 삭제
    IF (T_DROP_CODE IS NOT NULL) 
        -- 중도탈락코드를 삭제하기      
        THEN DELETE 
             FROM STUDENT_DROP 
             WHERE DROP_CODE = T_DROP_CODE; 
    ELSE
        RAISE USER_DEFINE_ERROR;
    END IF;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
                THEN RAISE_APPLICATION_ERROR(-20603, '중도탈락이 등록되지 않아 삭제할 수 없습니다.');
                    ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    -- 커밋
    COMMIT;
END;




--------------------------------------------------------------------------------

-- [교수자]
--○ 교수자 데이터 추가 프로시저 PRC_TC_INSERT(이름, 주민번호)
CREATE OR REPLACE PROCEDURE PRC_TC_INSERT
(V_NAME IN TEACHER_REGISTER.NAME%TYPE
,V_SSN  IN TEACHER_REGISTER.SSN%TYPE
)
IS
    V_TEACHER_CODE  TEACHER_REGISTER.TEACHER_CODE%TYPE; --T0001부터 시작.       
    V_PASSWORD      TEACHER_REGISTER.PASSWORD%TYPE;
BEGIN
    SELECT NVL(MAX(TO_NUMBER(SUBSTR(TEACHER_CODE,2))),0)  + 1 INTO V_TEACHER_CODE
    FROM TEACHER_REGISTER;
    
    V_TEACHER_CODE := 'T' || LPAD(TO_CHAR(V_TEACHER_CODE),4,0);
    
    V_PASSWORD := SUBSTR(V_SSN,7);
    
   INSERT INTO  TEACHER_REGISTER(TEACHER_CODE,PASSWORD,NAME,SSN)
   VALUES(V_TEACHER_CODE,V_PASSWORD, V_NAME, V_SSN);
END;

--------------------------------------------------------------------------------

--○ 교수자가 교수정보 수정 프로시저 TEACHER_REGISTER_TC_UPDATE
CREATE OR REPLACE PROCEDURE TEACHER_REGISTER_TC_UPDATE
( V_TC_COD        IN TEACHER_REGISTER.TEACHER_CODE%TYPE
, V_PW            IN TEACHER_REGISTER.PASSWORD%TYPE
, V_NEW_PW        IN TEACHER_REGISTER.PASSWORD%TYPE
, V_NAME          IN TEACHER_REGISTER.NAME%TYPE
, V_SSN           IN TEACHER_REGISTER.SSN%TYPE
)
IS
    TEMP_TC_COD     NUMBER;
    TEMP_PW         NUMBER;
    
    TC_COD_ERROR    EXCEPTION;
    PW_ERROR        EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_TC_COD
      FROM TEACHER_REGISTER
     WHERE TEACHER_CODE = V_TC_COD;
    
    SELECT COUNT(*) INTO TEMP_PW
      FROM TEACHER_REGISTER
     WHERE TEACHER_CODE = V_TC_COD
       AND PASSWORD = V_PW;
    
    IF(TEMP_TC_COD = 0)
        THEN RAISE TC_COD_ERROR;
    ELSIF (TEMP_PW = 0)
        THEN RAISE PW_ERROR;
    END IF;
    
    UPDATE TEACHER_REGISTER
       SET PASSWORD = V_NEW_PW, NAME = V_NAME, SSN = V_SSN
     WHERE TEACHER_CODE = V_TC_COD;

    EXCEPTION
        WHEN TC_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20202, '유효한 교수가 아닙니다.');
            ROLLBACK;
        WHEN PW_ERROR
            THEN RAISE_APPLICATION_ERROR(-20103, '아이디, 비밀번호가 일치하지 않습니다');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 교수자 비밀번호변경 프로시저 PRC_TC_PW_CHANGE(ID,PW,NEWPW)
CREATE OR REPLACE PROCEDURE PRC_TC_PW_CHANGE
( V_CODE  IN TEACHER_REGISTER.TEACHER_CODE%TYPE
, V_PW    IN TEACHER_REGISTER.PASSWORD%TYPE
, V_NEWPW IN TEACHER_REGISTER.PASSWORD%TYPE)
IS
    V_PW2 TEACHER_REGISTER.PASSWORD%TYPE;
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    
    SELECT PASSWORD INTO V_PW2
    FROM TEACHER_REGISTER
    WHERE TEACHER_CODE = V_CODE;
    
    IF (V_PW = V_PW2)
        THEN UPDATE TEACHER_REGISTER
             SET PASSWORD = V_NEWPW
             WHERE TEACHER_CODE = V_CODE;
    ELSE
        RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- 커밋
    COMMIT;
    
    EXCEPTION
       WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20103, '아이디, 비밀번호가 일치하지 않습니다.');
            ROLLBACK;
END;

--------------------------------------------------------------------------------

-- 성적 입력 프로시저 PRC_IN_SCR_INSERT
-- 성적 입력
CREATE OR REPLACE PROCEDURE PRC_IN_SCR_INSERT
( V_ATTENDANCE_SCORE     IN SCORE_INPUT.ATTENDANCE_SCORE%TYPE
, V_WRITING_SCORE        IN SCORE_INPUT.WRITING_SCORE%TYPE
, V_PERFORMANCE_SCORE    IN SCORE_INPUT.PERFORMANCE_SCORE%TYPE
, V_OP_SUBJECT_CODE      IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_STUDENT_CODE         IN STUDENT_REGISTER.STUDENT_CODE%TYPE
)
IS
    V_OP_COURSE_CODE    COURSE_OPEN.OP_COURSE_CODE%TYPE;
    V_REG_COURSE_CODE   COURSE_REGISTER.REG_COURSE_CODE%TYPE;
    
    V_DROP_CODE         STUDENT_DROP.DROP_CODE%TYPE;
    
    V_START_DATE        SUBJECT_OPEN.START_DATE%TYPE;
    V_END_DATE          SUBJECT_OPEN.END_DATE%TYPE;
    V_DROP_DATE         STUDENT_DROP.DROP_DATE%TYPE;
    V_SYSDATE           DATE;
    
    V_SERIAL_CODE       SCORE_INPUT.SCORE_CODE%TYPE;
    V_SCORE_CODE        SCORE_INPUT.SCORE_CODE%TYPE;
    
    V_SCORE_CODE_NULL_CHECK NUMBER;
    V_SCORE_CODE_SERIAL_INDEX NUMBER;
     
    USER_DEFINE_ERROR1   EXCEPTION;
    USER_DEFINE_ERROR2   EXCEPTION;
    USER_DEFINE_ERROR3   EXCEPTION;
    USER_DEFINE_ERROR4   EXCEPTION;
    USER_DEFINE_ERROR5   EXCEPTION;
BEGIN
    -- REG_COURSE_CODE 얻기 위한 과정 1
    SELECT OP_COURSE_CODE INTO V_OP_COURSE_CODE
    FROM SUBJECT_OPEN
    WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
        
    --REG_COURSE_CODE 얻기 위한 과정 2
    -- RIGHT OUTHER JOIN DUAL을 하는 이유
    -- ROW 조회결과가 없을 경우 NULL이 아니라 아예 없는 값
    -- 따라서 NULL 출력을 위해서 DUAL과 RIGHT OUTER JOIN을 함
    SELECT T.REG_COURSE_CODE INTO V_REG_COURSE_CODE
    FROM
    ( 
        SELECT REG_COURSE_CODE
        FROM COURSE_REGISTER
        WHERE STUDENT_CODE = V_STUDENT_CODE AND OP_COURSE_CODE = V_OP_COURSE_CODE
    ) T RIGHT OUTER JOIN DUAL
    ON 1=1;
        
    -- 학생이 수강신청을 했는지 안했는지 검사
    IF (V_REG_COURSE_CODE IS NULL)
        THEN RAISE USER_DEFINE_ERROR1;
    END IF;
    
    -- 이미 성적 입력한 적이 있는지 검사
    SELECT T.SCORE_CODE INTO V_SCORE_CODE    
    FROM
    (
        SELECT SCORE_CODE
        FROM SCORE_INPUT
        WHERE REG_COURSE_CODE = V_REG_COURSE_CODE AND OP_SUBJECT_CODE = V_OP_SUBJECT_CODE
    ) T RIGHT OUTER JOIN DUAL
    ON 1=1;
    
    -- 성적이 이미 존재하면 PRC_IN_SCR_UPDATE2 로 보냄. 
    IF ( V_SCORE_CODE IS NOT NULL )
        THEN RAISE USER_DEFINE_ERROR4;
    END IF;
    
    -- 중도탈락여부를 확인하기 위한 코드. 중도탈락 시점도 포함
    -- DROP을 안 했을 경우 NULL값 부여
    SELECT T.DROP_CODE, T.DROP_DATE INTO V_DROP_CODE, V_DROP_DATE
    FROM
    (
        SELECT DROP_CODE, DROP_DATE 
        FROM STUDENT_DROP
        WHERE REG_COURSE_CODE = V_REG_COURSE_CODE
    ) T RIGHT OUTER JOIN DUAL
    ON 1=1;
        
    -- 해당 과목 기간 추출
    SELECT START_DATE, END_DATE INTO V_START_DATE, V_END_DATE
    FROM SUBJECT_OPEN
    WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
       
    -- DROP_CODE(중도탈락코드)가 있으면 중도탈락
    IF ( V_DROP_CODE IS NOT NULL )
            -- 중도탈락시점이 강의 끝나는 시점보다 빠른 경우. 안 들은 수업.
        THEN IF( V_END_DATE > V_DROP_DATE)
                THEN RAISE USER_DEFINE_ERROR2;
             END IF;       
    END IF;
     
    -- 성적 입력시점이 강의 시작 전이라면 불가능
    SELECT SYSDATE INTO V_SYSDATE
    FROM DUAL;
        
    IF (SYSDATE < V_START_DATE)
        THEN RAISE USER_DEFINE_ERROR3;
    END IF;
    
    IF (V_ATTENDANCE_SCORE < 0 OR V_ATTENDANCE_SCORE > 100 
        OR V_WRITING_SCORE < 0 OR V_WRITING_SCORE > 100
        OR V_PERFORMANCE_SCORE < 0 OR V_PERFORMANCE_SCORE > 100)    
        THEN RAISE USER_DEFINE_ERROR5;
    END IF;
    
    
    -- 성적코드 = 과목코드_시리얼넘버
    -- EX) S007_0001  *시리얼넘버: 연속된 오름차순 숫자
    -- 현재 더미데이터의 경우 C1S1_001 사용중
    -- 3자리 시리얼 넘버 생성
           
    SELECT COUNT(*) INTO V_SCORE_CODE_NULL_CHECK
    FROM SCORE_INPUT
    WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
    
    IF (V_SCORE_CODE_NULL_CHECK  = 0)
        THEN V_SCORE_CODE_SERIAL_INDEX := 6;
    ELSE
        SELECT (MAX(DISTINCT INSTR(SCORE_CODE, '_')))+1 INTO V_SCORE_CODE_SERIAL_INDEX
        FROM SCORE_INPUT
        WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
    END IF;
    
    SELECT TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(SCORE_CODE, V_SCORE_CODE_SERIAL_INDEX))), 0)+1) INTO V_SERIAL_CODE
    FROM SCORE_INPUT
    WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
       
    -- 성적입력코드(PK) 생성
    SELECT (V_OP_SUBJECT_CODE || '_' || V_SERIAL_CODE) INTO V_SCORE_CODE
    FROM DUAL;
    
    --입력
    INSERT INTO SCORE_INPUT (SCORE_CODE, OP_SUBJECT_CODE, REG_COURSE_CODE, ATTENDANCE_SCORE, WRITING_SCORE, PERFORMANCE_SCORE)
    VALUES(V_SCORE_CODE, V_OP_SUBJECT_CODE, V_REG_COURSE_CODE, V_ATTENDANCE_SCORE, V_WRITING_SCORE, V_PERFORMANCE_SCORE);  
    
    COMMIT;

    -- 예외
    EXCEPTION
        WHEN USER_DEFINE_ERROR1 
            THEN RAISE_APPLICATION_ERROR(-20701, '해당 학생의 수강신청 내역이 없습니다.');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR2 
            THEN RAISE_APPLICATION_ERROR(-20600, '중도 탈락으로 성적입력 대상에서 제외됩니다');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR3 
            THEN RAISE_APPLICATION_ERROR(-20602, '강의예정으로 성적 입력이 불가능합니다.');
                ROLLBACK;
        -- 이미 값이 존재하는 경우 PRC_IN_SCR_UPDATE2(업데이트 프로시저)로 보냄.
        WHEN USER_DEFINE_ERROR4
            THEN PRC_IN_SCR_UPDATE2(V_ATTENDANCE_SCORE, V_WRITING_SCORE, V_PERFORMANCE_SCORE
                                   , V_SCORE_CODE, V_REG_COURSE_CODE);
        WHEN USER_DEFINE_ERROR5 
            THEN RAISE_APPLICATION_ERROR(-20401, '점수는 0 ~ 100 사이의 값만 입력 가능합니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;

--------------------------------------------------------------------------------

-- 배점 정보 수정 프로시저
CREATE OR REPLACE PROCEDURE PRC_OP_SUB_UPDATE_RATE
( V_OP_SUBJECT_CODE     IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_ATTENDANCE_RATE     IN SUBJECT_OPEN.ATTENDANCE_RATE%TYPE
, V_WRITING_RATE         IN SUBJECT_OPEN.WRITING_RATE%TYPE
, V_PERFORMANCE_RATE    IN SUBJECT_OPEN.PERFORMANCE_RATE%TYPE
)
IS
    TEST_OP_SUBJECT_CODE   SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE;
    
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 데이터가 조회되지 않는 경우 NO_DATA_FOUND 발생
    SELECT OP_SUBJECT_CODE INTO TEST_OP_SUBJECT_CODE
    FROM SUBJECT_OPEN
    WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
    
    IF (V_WRITING_RATE + V_ATTENDANCE_RATE + V_PERFORMANCE_RATE != 100)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE SUBJECT_OPEN
    SET WRITING_RATE = V_WRITING_RATE
      , ATTENDANCE_RATE = V_ATTENDANCE_RATE
      , PERFORMANCE_RATE = V_PERFORMANCE_RATE
    WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
    
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20300, '유효한 과목이 아닙니다.');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20400, '총 배점은 100점입니다. 다시 입력해주세요');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    
    --커밋
    COMMIT;
END;

--------------------------------------------------------------------------------

-- 과목과 전담강사 일치하는지 확인 후, 그 과목에 대한 전체 학생 성적 출력하는 프로시저
CREATE OR REPLACE PROCEDURE PRC_PRINT_SUBJECT_GRADE
( V_OP_SUBJECT_CODE     IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_TEACHER_CODE        IN TEACHER_REGISTER.TEACHER_CODE%TYPE
)
IS
    -- 에러 체크 도와주는 변수
    V_TEACHER_IS_NULL_CHECK      TEACHER_REGISTER.TEACHER_CODE%TYPE;
    V_TEACHER_EXIST             NUMBER;
    
    USER_DEFINE_ERROR1          EXCEPTION;
    USER_DEFINE_ERROR2          EXCEPTION;
    USER_DEFINE_ERROR3          EXCEPTION;
    
    -- 커서
    V_CURSOR                    SYS_REFCURSOR;
    
    V_ROWCOUNT                  NUMBER;
    
    -- 이 밑으로 선언된 것 모두 커서용 변수
    V_SUBJECT_NAME              SUBJECT.SUBJECT_NAME%TYPE;
    V_START_DATE                SUBJECT_OPEN.START_DATE%TYPE;
    V_END_DATE                  SUBJECT_OPEN.END_DATE%TYPE;
    V_TEXTBOOK_NAME             TEXTBOOK.TEXTBOOK_NAME%TYPE;
    V_NAME                      STUDENT_REGISTER.NAME%TYPE;
    V_ATTENDANCE_SCORE          SCORE_INPUT.ATTENDANCE_SCORE%TYPE;
    V_WRITING_SCORE             SCORE_INPUT.WRITING_SCORE%TYPE;
    V_PERFORMANCE_SCORE         SCORE_INPUT.PERFORMANCE_SCORE%TYPE;
    V_ATTENDANCE_SCORE_RATE     SCORE_INPUT.ATTENDANCE_SCORE%TYPE;
    V_WRITING_SCORE_RATE        SCORE_INPUT.WRITING_SCORE%TYPE;
    V_PERFORMANCE_SCORE_RATE    SCORE_INPUT.PERFORMANCE_SCORE%TYPE;
    V_TOTAL                     NUMBER;
    V_RANK                      NUMBER;
    V_DROP                      VARCHAR2(20);
BEGIN
    -- 일단 이 과목에 전담 강사가 있는지 검사. 강사가 NULL인 경우가 있기 때문.    
    SELECT CO.TEACHER_CODE INTO V_TEACHER_IS_NULL_CHECK
    FROM SUBJECT_OPEN SO, COURSE_OPEN CO
    WHERE SO.OP_COURSE_CODE = CO.OP_COURSE_CODE
      AND SO.OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
    
    IF (V_TEACHER_IS_NULL_CHECK IS NULL)
        THEN RAISE USER_DEFINE_ERROR1;
    END IF;
    
    SELECT COUNT(*) INTO V_TEACHER_EXIST
    FROM TEACHER_REGISTER
    WHERE TEACHER_CODE = V_TEACHER_CODE;
    
    IF (V_TEACHER_EXIST  = 0)
        THEN RAISE USER_DEFINE_ERROR3;
    END IF;
    
    -- 전담 강사와 과목이 일치하는지 검사
    IF (V_TEACHER_IS_NULL_CHECK != V_TEACHER_CODE)
        THEN RAISE USER_DEFINE_ERROR2;
    END IF;
    
    -- 커서 호출
    PRC_GRADE_CURSOR(V_OP_SUBJECT_CODE, V_CURSOR);
    
    -- 호출한 커서 이용해서 성적값 출력
    
    DBMS_OUTPUT.PUT_LINE( ' 과목명 ' || '   ' || ' 시작 날짜 ' || '   ' || '종료 날짜 '
                            || '   ' || '교재명 ' || '   ' || '학생명 ' || '   ' || '출결점수'
                            || '   ' || '필기점수' || '   ' || '실기점수'
                            || '   ' || '출결(배점)' || '   ' || '필기(배점)'
                            || '   ' || '실기(배점)' || '   ' || '총합' || '   ' || '등수' || '   ' || '중도탈락여부');
    LOOP
        FETCH V_CURSOR INTO V_SUBJECT_NAME, V_START_DATE, V_END_DATE
                                  , V_TEXTBOOK_NAME, V_NAME, V_ATTENDANCE_SCORE
                                  , V_WRITING_SCORE, V_PERFORMANCE_SCORE
                                  , V_ATTENDANCE_SCORE_RATE, V_WRITING_SCORE_RATE
                                  , V_PERFORMANCE_SCORE_RATE, V_TOTAL, V_RANK, V_DROP;
        
        -- 데이터 출력이 없는 경우 감지.
        IF ( V_CURSOR%ROWCOUNT = 0 )
            THEN V_ROWCOUNT := V_CURSOR%ROWCOUNT;
        END IF;
        
        EXIT WHEN V_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_SUBJECT_NAME || '   ' || V_START_DATE || '   ' || V_END_DATE
                            || '   ' || V_TEXTBOOK_NAME || '   ' || V_NAME || CHR(9) || CHR(9) || V_ATTENDANCE_SCORE
                            || CHR(9) || CHR(9) || '   ' || V_WRITING_SCORE || CHR(9) || CHR(9) || CHR(9) || V_PERFORMANCE_SCORE
                            || CHR(9) || CHR(9) || '   ' || V_ATTENDANCE_SCORE_RATE || CHR(9) || CHR(9) || '   ' 
                            || V_WRITING_SCORE_RATE || CHR(9) || CHR(9) || '   ' ||V_PERFORMANCE_SCORE_RATE 
                            || CHR(9) || CHR(9) || V_TOTAL || CHR(9) || CHR(9) || V_RANK 
                            || CHR(9) || CHR(9) || V_DROP);
    END LOOP;
    CLOSE V_CURSOR;
    
    IF ( V_ROWCOUNT = 0)
        THEN DBMS_OUTPUT.PUT_LINE('데이터 없음');
    END IF;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR1
            THEN RAISE_APPLICATION_ERROR(-20502, '해당 과목에 전담 교수가 없습니다.');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR2
            THEN RAISE_APPLICATION_ERROR(-20501, '해당 교수가 전담하고 있는 과목이 아닙니다.');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR3
            THEN RAISE_APPLICATION_ERROR(-20504, '교수가 존재하지 않습니다');
                ROLLBACK;
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20503, '과목이 존재하지 않습니다');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;

--------------------------------------------------------------------------------

-- 과목에 대한 성적 출력을 위한 커서 호출 프로시저
CREATE OR REPLACE PROCEDURE PRC_GRADE_CURSOR
( V_OP_SUBJECT_CODE     IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_CURSOR              IN OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN V_CURSOR FOR
        SELECT S.SUBJECT_NAME"과목명", SO.START_DATE"시작기간", SO.END_DATE"끝기간", T.TEXTBOOK_NAME"교재명"
         , SR.NAME"학생명", SI.ATTENDANCE_SCORE"출결", SI.WRITING_SCORE"필기", SI.PERFORMANCE_SCORE"실기"
         , SI.ATTENDANCE_SCORE*SO.ATTENDANCE_RATE*0.01"출결(배점적용)", SI.WRITING_SCORE*SO.WRITING_RATE*0.01"필기(배점적용)", SI.PERFORMANCE_SCORE*SO.PERFORMANCE_RATE*0.01"실기(배점적용)" 
         , SI.ATTENDANCE_SCORE*SO.ATTENDANCE_RATE*0.01 + SI.WRITING_SCORE*SO.WRITING_RATE*0.01 + SI.PERFORMANCE_SCORE*SO.PERFORMANCE_RATE*0.01 "총점"
         , RANK() OVER (PARTITION BY SI.OP_SUBJECT_CODE 
            ORDER BY (SI.ATTENDANCE_SCORE*SO.ATTENDANCE_RATE*0.01 
                      + SI.WRITING_SCORE*SO.WRITING_RATE*0.01 
                      + SI.PERFORMANCE_SCORE*SO.PERFORMANCE_RATE*0.01)) "등수"
         , CASE WHEN CR.REG_COURSE_CODE = SD.REG_COURSE_CODE THEN '중도탈락'
                ELSE ' ' END "중도탈락"
        FROM 
        (
            SELECT *
            FROM SUBJECT_OPEN
            WHERE OP_SUBJECT_CODE = (V_OP_SUBJECT_CODE)
        ) SO, TEXTBOOK T, SUBJECT S, SCORE_INPUT SI, COURSE_REGISTER CR, STUDENT_REGISTER SR, STUDENT_DROP SD
        WHERE SO.TEXTBOOK_CODE = T.TEXTBOOK_CODE
          AND SO.SUBJECT_CODE = S.SUBJECT_CODE
          AND SO.OP_SUBJECT_CODE = SI.OP_SUBJECT_CODE
          AND SI.REG_COURSE_CODE = CR.REG_COURSE_CODE
          AND SO.OP_COURSE_CODE = CR.OP_COURSE_CODE
          AND CR.STUDENT_CODE = SR.STUDENT_CODE
          AND CR.REG_COURSE_CODE = SD.REG_COURSE_CODE(+);
END;

--------------------------------------------------------------------------------

-- 학생 성적 삭제 프로시저
CREATE OR REPLACE PROCEDURE PRC_IN_SCR_DELETE
( V_SCORE_CODE           IN SCORE_INPUT.SCORE_CODE%TYPE 
)
IS
    V_SCORE_CODE_CHECK   SCORE_INPUT.SCORE_CODE%TYPE;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    SELECT SCORE_CODE INTO V_SCORE_CODE_CHECK
    FROM SCORE_INPUT
    WHERE SCORE_CODE = V_SCORE_CODE;
        
    DELETE
    FROM SCORE_INPUT
    WHERE SCORE_CODE = V_SCORE_CODE_CHECK;
    
    -- COMMIT
    COMMIT;
        
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20500, '해당 성적이 존재하지 않습니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;

--------------------------------------------------------------------------------

--○ 성적 수정 프로시저
CREATE OR REPLACE PROCEDURE PRC_IN_SCR_UPDATE
( V_ATTENDANCE_SCORE     IN SCORE_INPUT.ATTENDANCE_SCORE%TYPE
, V_WRITING_SCORE        IN SCORE_INPUT.WRITING_SCORE%TYPE
, V_PERFORMANCE_SCORE    IN SCORE_INPUT.PERFORMANCE_SCORE%TYPE
, V_OP_SUBJECT_CODE     IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_STUDENT_CODE     IN STUDENT_REGISTER.STUDENT_CODE%TYPE
)
IS
    V_OP_COURSE_CODE    COURSE_OPEN.OP_COURSE_CODE%TYPE;
    V_REG_COURSE_CODE   COURSE_REGISTER.REG_COURSE_CODE%TYPE;
    
    V_SCORE_CODE        SCORE_INPUT.SCORE_CODE%TYPE;
    
    USER_DEFINE_ERROR1   EXCEPTION;
    USER_DEFINE_ERROR2   EXCEPTION;
    USER_DEFINE_ERROR3   EXCEPTION;
BEGIN
    -- REG_COURSE_CODE 얻기 위한 과정 1
    SELECT OP_COURSE_CODE INTO V_OP_COURSE_CODE
    FROM SUBJECT_OPEN
    WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE;
    
    --REG_COURSE_CODE 얻기 위한 과정 2
    -- RIGHT OUTHER JOIN DUAL을 하는 이유
    -- ROW 조회결과가 없을 경우 NULL이 아니라 아예 없는 값
    -- 따라서 NULL 출력을 위해서 DUAL과 RIGHT OUTER JOIN을 함
    SELECT T.REG_COURSE_CODE INTO V_REG_COURSE_CODE
    FROM
    ( 
        SELECT REG_COURSE_CODE
        FROM COURSE_REGISTER
        WHERE STUDENT_CODE = V_STUDENT_CODE AND OP_COURSE_CODE = V_OP_COURSE_CODE
    ) T RIGHT OUTER JOIN DUAL
    ON 1=1;  
    
    IF (V_REG_COURSE_CODE IS NULL)
        THEN RAISE USER_DEFINE_ERROR3;
    END IF;
    
    -- 입력받은 학생이 해당 과목 성적이 있는지 없는지 유효성 검사
    
    -- SCORE_CODE를 받아오는데, 이게 비어있으면 학생의 과목 성적이 없는 것.
    
    SELECT T.SCORE_CODE INTO V_SCORE_CODE
    FROM
    (
        SELECT SCORE_CODE
        FROM SCORE_INPUT
        WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE
          AND REG_COURSE_CODE = V_REG_COURSE_CODE        
    ) T RIGHT OUTER JOIN DUAL
    ON 1=1;
       
    -- NULL 검사. 값없으면 에러.
    IF ( V_SCORE_CODE IS NULL )
        THEN RAISE USER_DEFINE_ERROR1;
    END IF;
    
    -- 0~100점 사이의 값인지 유효성 검사.
    -- 출결, 필기, 실기 0 ~ 100점 사이값인 경우만 UPDATE 진행하기
    -- 이외의 값은 예외발생
    IF ((V_ATTENDANCE_SCORE >= 0 AND V_ATTENDANCE_SCORE <= 100 )
        AND (V_WRITING_SCORE >= 0 AND V_WRITING_SCORE <= 100)
        AND (V_PERFORMANCE_SCORE >= 0 AND V_PERFORMANCE_SCORE <= 100))    
    THEN 
        UPDATE SCORE_INPUT
        SET ATTENDANCE_SCORE = V_ATTENDANCE_SCORE
          , WRITING_SCORE = V_WRITING_SCORE
          , PERFORMANCE_SCORE = V_PERFORMANCE_SCORE
        WHERE SCORE_CODE = V_SCORE_CODE;
    ELSE 
        RAISE USER_DEFINE_ERROR2;
    END IF;
    
        
    -- 예외 발생
    EXCEPTION
       WHEN USER_DEFINE_ERROR1
           THEN RAISE_APPLICATION_ERROR(-20500, '해당 성적이 존재하지 않습니다.');
               ROLLBACK;
       WHEN USER_DEFINE_ERROR2
           THEN RAISE_APPLICATION_ERROR(-20401, '점수는 0 ~ 100 사이의 값만 입력 가능합니다.');  
               ROLLBACK;
       WHEN USER_DEFINE_ERROR3
           THEN RAISE_APPLICATION_ERROR(-20701, '해당 학생의 수강신청 내역이 없습니다.');  
               ROLLBACK; 
       WHEN OTHERS
           THEN ROLLBACK;
    
    -- 커밋
    COMMIT;    
END;

--------------------------------------------------------------------------------

-- 입력하려는데, 값이 존재해서 수정해야하는 경우 쓰는 UPDATE 프로시저
CREATE OR REPLACE PROCEDURE PRC_IN_SCR_UPDATE2
( V_ATTENDANCE_SCORE     IN SCORE_INPUT.ATTENDANCE_SCORE%TYPE
, V_WRITING_SCORE        IN SCORE_INPUT.WRITING_SCORE%TYPE
, V_PERFORMANCE_SCORE    IN SCORE_INPUT.PERFORMANCE_SCORE%TYPE
, V_SCORE_CODE           IN SCORE_INPUT.SCORE_CODE%TYPE 
, V_REG_COURSE_CODE      IN COURSE_REGISTER.REG_COURSE_CODE%TYPE
)
IS
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    -- 0~100점 사이의 값인지 유효성 검사.
    -- 출결, 필기, 실기 0 ~ 100점 사이값인 경우만 UPDATE 진행하기
    -- 이외의 값은 예외발생
    IF ((V_ATTENDANCE_SCORE >= 0 AND V_ATTENDANCE_SCORE <= 100 )
        AND (V_WRITING_SCORE >= 0 AND V_WRITING_SCORE <= 100)
        AND (V_PERFORMANCE_SCORE >= 0 AND V_PERFORMANCE_SCORE <= 100))    
        THEN UPDATE SCORE_INPUT
             SET ATTENDANCE_SCORE = V_ATTENDANCE_SCORE
               , WRITING_SCORE = V_WRITING_SCORE
               , PERFORMANCE_SCORE = V_PERFORMANCE_SCORE
             WHERE SCORE_CODE = V_SCORE_CODE;
    ELSE 
        RAISE USER_DEFINE_ERROR;
    END IF;

    -- 예외 발생
    EXCEPTION
       WHEN USER_DEFINE_ERROR
           THEN RAISE_APPLICATION_ERROR(-20401, '점수는 0 ~ 100 사이의 값만 입력 가능합니다.');  
               ROLLBACK;
       WHEN OTHERS
           THEN ROLLBACK;
    -- 커밋
    COMMIT;
END;


--------------------------------------------------------------------------------

-- [학생]
--○ 학생 비밀번호변경 프로시저 PRC_STD_PW_CHANGE(ID,PW,NEWPW)
CREATE OR REPLACE PROCEDURE PRC_STD_PW_CHANGE
( V_STD_CODE  IN STUDENT_REGISTER.STUDENT_CODE%TYPE
, V_STD_PW    IN STUDENT_REGISTER.PASSWORD%TYPE
, V_STD_NEWPW IN STUDENT_REGISTER.PASSWORD%TYPE)
IS
    V_STD_PW2 STUDENT_REGISTER.PASSWORD%TYPE;
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    
    SELECT PASSWORD INTO V_STD_PW2
    FROM STUDENT_REGISTER
    WHERE STUDENT_CODE = V_STD_CODE;
    
    IF (V_STD_PW = V_STD_PW2)
        THEN UPDATE STUDENT_REGISTER
             SET PASSWORD = V_STD_NEWPW
             WHERE STUDENT_CODE = V_STD_CODE;
    ELSE
        RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- 커밋
    COMMIT;
    
    EXCEPTION
       WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20103, '아이디, 비밀번호가 일치하지 않습니다.');
            ROLLBACK;
END;

--------------------------------------------------------------------------------

--○ 학생의 학생정보 수정 프로시저 PRC_STU_REG_STUEDIT
CREATE OR REPLACE PROCEDURE PRC_STU_REG_STUEDIT
(V_STD_COD       IN STUDENT_REGISTER.STUDENT_CODE%TYPE  --(학생코드)
,V_PW            IN STUDENT_REGISTER.PASSWORD%TYPE      --(비밀번호)
,V_NEW_PW        IN STUDENT_REGISTER.PASSWORD%TYPE      --(수정할 비밀번호)
,V_NAME          IN STUDENT_REGISTER.NAME%TYPE          --(학생명)
,V_SSN           IN STUDENT_REGISTER.SSN%TYPE           --(주민번호)
)
IS
    TEMP_STD_COD    NUMBER;
    TEMP_PW         NUMBER;
    
    STD_COD_ERROR   EXCEPTION;
    PW_ERROR        EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO TEMP_STD_COD
      FROM STUDENT_REGISTER
     WHERE STUDENT_CODE = V_STD_COD;
     
    SELECT COUNT(*) INTO TEMP_PW
      FROM STUDENT_REGISTER
     WHERE STUDENT_CODE = V_STD_COD 
       AND PASSWORD = V_PW;
    
    IF(TEMP_STD_COD = 0)
        THEN RAISE STD_COD_ERROR;
    ELSIF (TEMP_PW = 0)
        THEN RAISE PW_ERROR;
    END IF;
    
    --UPDATE
    UPDATE STUDENT_REGISTER
      SET PASSWORD = V_NEW_PW,  NAME =  V_NAME  , SSN = V_SSN
    WHERE STUDENT_CODE = V_STD_COD
      AND PASSWORD = V_PW ;  
    
    EXCEPTION
        WHEN STD_COD_ERROR
            THEN RAISE_APPLICATION_ERROR(-20100, '해당 아이디가 존재하지 않습니다.');
                ROLLBACK;
         WHEN PW_ERROR
            THEN RAISE_APPLICATION_ERROR(-20103, '아이디, 비밀번호가 일치하지 않습니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
      
    COMMIT;
END;

--------------------------------------------------------------------------------

--○ 학생이 수강 끝낸 과목 리스트 확인하는 프로시저
CREATE OR REPLACE PROCEDURE PRC_GET_SUBJECT_LIST
( V_STUDENT_CODE    IN STUDENT_REGISTER.STUDENT_CODE%TYPE
, V_CURSOR          IN OUT SYS_REFCURSOR
)
IS
    V_REG_COURSE_CODE   COURSE_REGISTER.REG_COURSE_CODE%TYPE;
    
    STUDENT_EXIST       NUMBER;
    
    USER_DEFINE_ERROR1  EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO STUDENT_EXIST
    FROM STUDENT_REGISTER
    WHERE STUDENT_CODE = V_STUDENT_CODE;
    
    IF (STUDENT_EXIST = 0)
        THEN RAISE USER_DEFINE_ERROR1;
    END IF;
    
    SELECT REG_COURSE_CODE INTO V_REG_COURSE_CODE
    FROM COURSE_REGISTER
    WHERE STUDENT_CODE = V_STUDENT_CODE;
    
    OPEN V_CURSOR FOR
        SELECT SO.OP_SUBJECT_CODE
        FROM
        (
            SELECT REG_COURSE_CODE, OP_COURSE_CODE, STUDENT_CODE
                 , CASE WHEN EXISTS ( SELECT 1
                                      FROM STUDENT_DROP
                                      WHERE REG_COURSE_CODE = V_REG_COURSE_CODE) -- 수강신청코드
                        THEN ( SELECT DROP_DATE
                               FROM STUDENT_DROP
                               WHERE REG_COURSE_CODE = V_REG_COURSE_CODE) -- 수강신청코드
                        ELSE SYSDATE END "CONDITION_DATE"
            FROM COURSE_REGISTER
            WHERE STUDENT_CODE = V_STUDENT_CODE -- 학생코드
        ) CR JOIN SUBJECT_OPEN SO ON CR.OP_COURSE_CODE = SO.OP_COURSE_CODE
        WHERE SO.END_DATE < CONDITION_DATE;
    
     EXCEPTION
        WHEN USER_DEFINE_ERROR1
            THEN RAISE_APPLICATION_ERROR(-20505, '학생이 존재하지 않습니다');
                ROLLBACK;
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20701, '해당 학생의 수강신청 내역이 없습니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    
END;

--------------------------------------------------------------------------------

-- 학생의 한 과목 성적을 얻어오는 프로시저
CREATE OR REPLACE PROCEDURE PRC_GET_STUDENT_GRADE
( V_STUDENT_CODE    IN STUDENT_REGISTER.STUDENT_CODE%TYPE
, V_OP_SUBJECT_CODE IN SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE
, V_CURSOR          OUT SYS_REFCURSOR
)
IS
    V_REG_COURSE_CODE       COURSE_REGISTER.REG_COURSE_CODE%TYPE;
    V_OP_COURSE_CODE        COURSE_REGISTER.OP_COURSE_CODE%TYPE;
    V_NAME                  STUDENT_REGISTER.NAME%TYPE;
    V_COURSE_NAME           COURSE.COURSE_NAME%TYPE;
BEGIN
    -- 수강신청코드, 과정개설코드
    SELECT REG_COURSE_CODE, OP_COURSE_CODE INTO V_REG_COURSE_CODE, V_OP_COURSE_CODE
    FROM COURSE_REGISTER
    WHERE STUDENT_CODE = V_STUDENT_CODE;
    
    -- 학생이름
    SELECT NAME INTO V_NAME
    FROM STUDENT_REGISTER
    WHERE STUDENT_CODE = V_STUDENT_CODE;
    
    -- 과정명
    SELECT C.COURSE_NAME INTO V_COURSE_NAME
    FROM COURSE_OPEN CO, COURSE C
    WHERE CO.COURSE_CODE = C.COURSE_CODE
      AND CO.OP_COURSE_CODE = V_OP_COURSE_CODE;
      
    OPEN V_CURSOR FOR
        SELECT V_NAME "학생명", V_COURSE_NAME "과정명", SI.SUBJECT_NAME "과목명", SI.START_DATE, SI.END_DATE
        , SI.TEXTBOOK_NAME "교재명", SI.ATTENDANCE_SCORE "출결점수", SI.WRITING_SCORE"필기점수", SI.PERFORMANCE_SCORE"실기점수"
        , SI.ATTENDENCE_SCORE_RATE"출결점수(배점)", SI.WRITING_SCORE_RATE"필기점수(배점)", SI.PERFORMANCE_SCORE_RATE"실기점수(배점)"
        , SI.TOTAL "총점", SI.RANK "등수"
        FROM
        (
            SELECT SI.REG_COURSE_CODE, S.SUBJECT_NAME, SO.START_DATE, SO.END_DATE, T.TEXTBOOK_NAME
                 , SI.ATTENDANCE_SCORE, SI.WRITING_SCORE, SI.PERFORMANCE_SCORE
                 , SI.ATTENDANCE_SCORE*SO.ATTENDANCE_RATE*0.01"ATTENDENCE_SCORE_RATE"
                 , SI.WRITING_SCORE*SO.WRITING_RATE*0.01"WRITING_SCORE_RATE"
                 , SI.PERFORMANCE_SCORE*SO.PERFORMANCE_RATE*0.01"PERFORMANCE_SCORE_RATE" 
                 , SI.ATTENDANCE_SCORE*SO.ATTENDANCE_RATE*0.01 
                    + SI.WRITING_SCORE*SO.WRITING_RATE*0.01 
                    + SI.PERFORMANCE_SCORE*SO.PERFORMANCE_RATE*0.01 "TOTAL"
                 , RANK() OVER (PARTITION BY SI.OP_SUBJECT_CODE
                    ORDER BY (SI.ATTENDANCE_SCORE*SO.ATTENDANCE_RATE*0.01 
                            + SI.WRITING_SCORE*SO.WRITING_RATE*0.01 
                            + SI.PERFORMANCE_SCORE*SO.PERFORMANCE_RATE*0.01)) "RANK"
            FROM
            (
                SELECT OP_SUBJECT_CODE, SUBJECT_CODE, TEXTBOOK_CODE, START_DATE, END_DATE
                     , ATTENDANCE_RATE, WRITING_RATE, PERFORMANCE_RATE
                FROM SUBJECT_OPEN
                WHERE OP_SUBJECT_CODE = V_OP_SUBJECT_CODE -- 입력받은 과목개설코드 
            ) SO JOIN TEXTBOOK T ON SO.TEXTBOOK_CODE = T.TEXTBOOK_CODE
                    JOIN SUBJECT S ON SO.SUBJECT_CODE = S.SUBJECT_CODE
                        JOIN SCORE_INPUT SI ON SO.OP_SUBJECT_CODE = SI.OP_SUBJECT_CODE
        ) SI
        WHERE SI.REG_COURSE_CODE = V_REG_COURSE_CODE;
END;

--------------------------------------------------------------------------------

--○ 학생이 자신이 수강하는 모든 과목에 대한 성적 출력 프로시저
CREATE OR REPLACE PROCEDURE PRC_PRINT_STUDENT_GRADE
( V_STUDENT_CODE    STUDENT_REGISTER.STUDENT_CODE%TYPE
)
IS
    -- 과목 리스트 받아옴
    V_OP_SUBJECT_CODE_LIST  SUBJECT_OPEN.OP_SUBJECT_CODE%TYPE;
    
    -- 과목리스트 받는 커서    
    V_CURSOR_SUBJECT_LIST   SYS_REFCURSOR;
    
    -- 학생 성적 받는 커서
    V_CURSOR_STUDENT_GRADE  SYS_REFCURSOR;
    
    V_NAME                      STUDENT_REGISTER.NAME%TYPE;
    V_COURSE_NAME               COURSE.COURSE_NAME%TYPE;
    V_SUBJECT_NAME              SUBJECT.SUBJECT_NAME%TYPE;
    V_START_DATE                SUBJECT_OPEN.START_DATE%TYPE;
    V_END_DATE                  SUBJECT_OPEN.END_DATE%TYPE;
    V_TEXTBOOK_NAME             TEXTBOOK.TEXTBOOK_NAME%TYPE;
    V_ATTENDANCE_SCORE          SCORE_INPUT.ATTENDANCE_SCORE%TYPE;
    V_WRITING_SCORE             SCORE_INPUT.WRITING_SCORE%TYPE;
    V_PERFORMANCE_SCORE         SCORE_INPUT.PERFORMANCE_SCORE%TYPE;
    V_ATTENDANCE_SCORE_RATE     NUMBER;
    V_WRITING_SCORE_RATE        NUMBER;
    V_PERFORMANCE_SCORE_RATE    NUMBER;
    V_TOTAL                     NUMBER;
    V_RANK                      NUMBER;
    
BEGIN
        
    PRC_GET_SUBJECT_LIST(V_STUDENT_CODE, V_CURSOR_SUBJECT_LIST);
    
    DBMS_OUTPUT.PUT_LINE('학생명' || CHR(9) || CHR(9) || '과정명' || CHR(9) || CHR(9) || '과목명' || '   ' || CHR(9)
                        || '시작일자' || '   ' || '종료일자' || '   ' || CHR(9) || '교재명' || '   ' ||  '출결점수'
                        || CHR(9) || '   ' || '필기점수' || CHR(9) || CHR(9) || '실기점수'
                        || CHR(9) || '   ' || '출결(배점)' || CHR(9)  
                        || '필기(배점)' || CHR(9) || '실기(배점)' 
                        || CHR(9) || '총점' || '    ' || '등수');
    
    LOOP
        FETCH V_CURSOR_SUBJECT_LIST INTO V_OP_SUBJECT_CODE_LIST;                
        EXIT WHEN V_CURSOR_SUBJECT_LIST%NOTFOUND;
        
        PRC_GET_STUDENT_GRADE( V_STUDENT_CODE, V_OP_SUBJECT_CODE_LIST, V_CURSOR_STUDENT_GRADE);
        LOOP
            FETCH V_CURSOR_STUDENT_GRADE INTO V_NAME, V_COURSE_NAME, V_SUBJECT_NAME, V_START_DATE, V_END_DATE
                                  , V_TEXTBOOK_NAME,  V_ATTENDANCE_SCORE, V_WRITING_SCORE, V_PERFORMANCE_SCORE
                                  , V_ATTENDANCE_SCORE_RATE, V_WRITING_SCORE_RATE, V_PERFORMANCE_SCORE_RATE
                                  , V_TOTAL, V_RANK;
                        
            
            EXIT WHEN V_CURSOR_STUDENT_GRADE%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE(V_NAME || CHR(9) || CHR(9) || V_COURSE_NAME || CHR(9) || V_SUBJECT_NAME || '   ' 
                                || V_START_DATE || '   ' || V_END_DATE || '   ' || V_TEXTBOOK_NAME || '   ' ||  V_ATTENDANCE_SCORE
                                || CHR(9) || CHR(9) || '   ' || V_WRITING_SCORE || CHR(9) || CHR(9) || CHR(9) || V_PERFORMANCE_SCORE
                                || CHR(9) || CHR(9) || '   ' || V_ATTENDANCE_SCORE_RATE || CHR(9) || CHR(9) || '   ' 
                                || V_WRITING_SCORE_RATE || CHR(9) || CHR(9) || '   ' ||V_PERFORMANCE_SCORE_RATE 
                                || CHR(9) || CHR(9) || V_TOTAL || CHR(9) || CHR(9) || V_RANK);
        END LOOP;
        CLOSE V_CURSOR_STUDENT_GRADE;
    END LOOP;
    CLOSE V_CURSOR_SUBJECT_LIST;
END;

--------------------------------------------------------------------------------
